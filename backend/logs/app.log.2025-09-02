2025-09-02 00:09:21 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:09:21 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:09:21 | INFO | sqlalchemy.engine.Engine | [cached since 1358s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:09:21 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:09:21 | INFO | sqlalchemy.engine.Engine | [cached since 1358s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:09:21 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:09:21 | INFO | sqlalchemy.engine.Engine | [cached since 1358s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 10, 0)
2025-09-02 00:09:21 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:09:21 | INFO | sqlalchemy.engine.Engine | [cached since 1358s ago] ('audit_level',)
2025-09-02 00:09:21 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 00:09:21 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:09:21 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:09:21 | INFO | sqlalchemy.engine.Engine | [cached since 1358s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:09:22 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:09:22 | INFO | sqlalchemy.engine.Engine | [cached since 1358s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:09:22 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:09:22 | INFO | sqlalchemy.engine.Engine | [cached since 1358s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 10, 0)
2025-09-02 00:09:22 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:09:22 | INFO | sqlalchemy.engine.Engine | [cached since 1358s ago] ('audit_level',)
2025-09-02 00:09:22 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | [generated in 0.00099s] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | [generated in 0.00083s] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | [generated in 0.00405s] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 10, 0)
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | [generated in 0.00104s] ('audit_level',)
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | [cached since 0.07s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | [cached since 0.06586s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | [cached since 0.06616s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 10, 0)
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | [cached since 0.0434s ago] ('audit_level',)
2025-09-02 00:25:53 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 00:29:14 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:29:14 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:29:14 | INFO | sqlalchemy.engine.Engine | [cached since 200.9s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:29:14 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:29:14 | INFO | sqlalchemy.engine.Engine | [cached since 200.9s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:29:14 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:29:14 | INFO | sqlalchemy.engine.Engine | [cached since 200.9s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 10, 0)
2025-09-02 00:29:14 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:29:14 | INFO | sqlalchemy.engine.Engine | [cached since 200.9s ago] ('audit_level',)
2025-09-02 00:29:14 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 00:29:14 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:29:14 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:29:14 | INFO | sqlalchemy.engine.Engine | [cached since 201s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:29:14 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:29:14 | INFO | sqlalchemy.engine.Engine | [cached since 201s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:29:14 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:29:14 | INFO | sqlalchemy.engine.Engine | [cached since 201s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 10, 0)
2025-09-02 00:29:14 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:29:14 | INFO | sqlalchemy.engine.Engine | [cached since 201s ago] ('audit_level',)
2025-09-02 00:29:14 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | [generated in 0.00094s] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | [generated in 0.00109s] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | [generated in 0.02123s] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 10, 0)
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | [generated in 0.00215s] ('audit_level',)
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | [cached since 0.08624s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | [cached since 0.08952s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | [cached since 0.08762s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 10, 0)
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | [cached since 0.03861s ago] ('audit_level',)
2025-09-02 00:33:03 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 00:33:28 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:33:28 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:33:28 | INFO | sqlalchemy.engine.Engine | [cached since 24.16s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:33:28 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:33:28 | INFO | sqlalchemy.engine.Engine | [cached since 24.16s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:33:28 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:33:28 | INFO | sqlalchemy.engine.Engine | [cached since 24.16s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 10, 0)
2025-09-02 00:33:28 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:33:28 | INFO | sqlalchemy.engine.Engine | [cached since 24.12s ago] ('audit_level',)
2025-09-02 00:33:28 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 00:33:28 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:33:28 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:33:28 | INFO | sqlalchemy.engine.Engine | [cached since 24.21s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:33:28 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:33:28 | INFO | sqlalchemy.engine.Engine | [cached since 24.21s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:33:28 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:33:28 | INFO | sqlalchemy.engine.Engine | [cached since 24.22s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 10, 0)
2025-09-02 00:33:28 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:33:28 | INFO | sqlalchemy.engine.Engine | [cached since 24.2s ago] ('audit_level',)
2025-09-02 00:33:28 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 00:33:43 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:33:43 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:33:43 | INFO | sqlalchemy.engine.Engine | [cached since 39.54s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:33:43 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:33:43 | INFO | sqlalchemy.engine.Engine | [cached since 39.54s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:33:43 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:33:43 | INFO | sqlalchemy.engine.Engine | [cached since 39.55s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 10, 0)
2025-09-02 00:33:43 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:33:43 | INFO | sqlalchemy.engine.Engine | [cached since 39.51s ago] ('audit_level',)
2025-09-02 00:33:43 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 00:33:43 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:33:43 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:33:43 | INFO | sqlalchemy.engine.Engine | [cached since 39.6s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:33:43 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:33:43 | INFO | sqlalchemy.engine.Engine | [cached since 39.6s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:33:43 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:33:43 | INFO | sqlalchemy.engine.Engine | [cached since 39.6s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 10, 0)
2025-09-02 00:33:43 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:33:43 | INFO | sqlalchemy.engine.Engine | [cached since 39.55s ago] ('audit_level',)
2025-09-02 00:33:43 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 00:36:42 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:36:42 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:36:42 | INFO | sqlalchemy.engine.Engine | [cached since 218.8s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:36:42 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:36:42 | INFO | sqlalchemy.engine.Engine | [cached since 218.8s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:36:42 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:36:42 | INFO | sqlalchemy.engine.Engine | [cached since 218.7s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 10, 0)
2025-09-02 00:36:42 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:36:42 | INFO | sqlalchemy.engine.Engine | [cached since 218.7s ago] ('audit_level',)
2025-09-02 00:36:42 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 00:36:42 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:36:42 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:36:42 | INFO | sqlalchemy.engine.Engine | [cached since 218.8s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:36:42 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:36:42 | INFO | sqlalchemy.engine.Engine | [cached since 218.8s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:36:42 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:36:42 | INFO | sqlalchemy.engine.Engine | [cached since 218.8s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 10, 0)
2025-09-02 00:36:42 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:36:42 | INFO | sqlalchemy.engine.Engine | [cached since 218.7s ago] ('audit_level',)
2025-09-02 00:36:42 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 00:38:41 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 00:38:41 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 00:38:41 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 00:38:41 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 00:38:41 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 00:38:41 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 00:38:41 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:38:41 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:38:41 | INFO | sqlalchemy.engine.Engine | [generated in 0.00102s] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:38:41 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:38:41 | INFO | sqlalchemy.engine.Engine | [generated in 0.00229s] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:38:41 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:38:41 | INFO | sqlalchemy.engine.Engine | [generated in 0.00166s] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 10, 0)
2025-09-02 00:38:41 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:38:41 | INFO | sqlalchemy.engine.Engine | [generated in 0.00092s] ('audit_level',)
2025-09-02 00:38:41 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | [generated in 0.00104s] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | [generated in 0.00218s] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | [generated in 0.00218s] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 10, 0)
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | [generated in 0.00233s] ('audit_level',)
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | [cached since 0.06531s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | [cached since 0.06296s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | [cached since 0.06258s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 10, 0)
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | [cached since 0.03681s ago] ('audit_level',)
2025-09-02 00:39:49 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 00:41:40 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:41:40 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:41:40 | INFO | sqlalchemy.engine.Engine | [cached since 111.3s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:41:40 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:41:40 | INFO | sqlalchemy.engine.Engine | [cached since 111.3s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:41:40 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:41:40 | INFO | sqlalchemy.engine.Engine | [cached since 111.3s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 10, 0)
2025-09-02 00:41:40 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:41:40 | INFO | sqlalchemy.engine.Engine | [cached since 111.2s ago] ('audit_level',)
2025-09-02 00:41:40 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 00:41:58 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:41:58 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:41:58 | INFO | sqlalchemy.engine.Engine | [cached since 128.4s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:41:58 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:41:58 | INFO | sqlalchemy.engine.Engine | [cached since 128.4s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:41:58 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:41:58 | INFO | sqlalchemy.engine.Engine | [cached since 128.4s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 5, 0)
2025-09-02 00:41:58 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:41:58 | INFO | sqlalchemy.engine.Engine | [cached since 128.3s ago] ('audit_level',)
2025-09-02 00:41:58 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 00:49:43 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:49:43 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:49:43 | INFO | sqlalchemy.engine.Engine | [cached since 593.5s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:49:43 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:49:43 | INFO | sqlalchemy.engine.Engine | [cached since 593.5s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:49:43 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:49:43 | INFO | sqlalchemy.engine.Engine | [cached since 593.5s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 10, 0)
2025-09-02 00:49:43 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:49:43 | INFO | sqlalchemy.engine.Engine | [cached since 593.5s ago] ('audit_level',)
2025-09-02 00:49:43 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 00:49:43 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 00:49:43 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 00:49:43 | INFO | sqlalchemy.engine.Engine | [cached since 593.6s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:49:43 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID
2025-09-02 00:49:43 | INFO | sqlalchemy.engine.Engine | [cached since 593.7s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'),)
2025-09-02 00:49:43 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.user_id = $1::UUID ORDER BY payment_terms.name 
 LIMIT $2::INTEGER OFFSET $3::INTEGER
2025-09-02 00:49:43 | INFO | sqlalchemy.engine.Engine | [cached since 593.7s ago] (UUID('41ae7df2-65a5-48af-80cc-6b3ff911dee7'), 10, 0)
2025-09-02 00:49:43 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 00:49:43 | INFO | sqlalchemy.engine.Engine | [cached since 593.7s ago] ('audit_level',)
2025-09-02 00:49:43 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 10:25:51 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 10:25:51 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 10:25:51 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 10:25:51 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 10:25:51 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 10:25:51 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 10:25:51 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 10:25:51 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.email = $1::VARCHAR
2025-09-02 10:25:51 | INFO | sqlalchemy.engine.Engine | [generated in 0.00231s] ('system@example.com',)
2025-09-02 10:25:52 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 10:26:08 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 10:26:08 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.email = $1::VARCHAR
2025-09-02 10:26:08 | INFO | sqlalchemy.engine.Engine | [generated in 0.00882s] ('system@example.com',)
2025-09-02 10:26:08 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 10:27:38 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 10:27:38 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 10:27:38 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 10:27:38 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 10:27:38 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 10:27:38 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 10:27:38 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 10:27:38 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.email = $1::VARCHAR
2025-09-02 10:27:38 | INFO | sqlalchemy.engine.Engine | [generated in 0.00174s] ('system@example.com',)
2025-09-02 10:27:38 | WARNING | passlib.handlers.bcrypt | (trapped) error reading bcrypt version
Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\passlib\handlers\bcrypt.py", line 620, in _load_backend_mixin
    version = _bcrypt.__about__.__version__
              ^^^^^^^^^^^^^^^^^
AttributeError: module 'bcrypt' has no attribute '__about__'
2025-09-02 10:27:39 | INFO | sqlalchemy.engine.Engine | INSERT INTO users (id, username, email, full_name, password, active, superuser, role_id, user_id, created_at, updated_at) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::BOOLEAN, $7::BOOLEAN, $8::UUID, $9::UUID, $10::TIMESTAMP WITH TIME ZONE, $11::TIMESTAMP WITH TIME ZONE)
2025-09-02 10:27:39 | INFO | sqlalchemy.engine.Engine | [generated in 0.00232s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'), 'system', 'system@example.com', 'system', '$2b$12$JAZ6fSZBtcKfy0DbeHfeFeQKMbUUexYx91ZyBo5JuuUo0Ot5FHGu.', True, False, None, None, datetime.datetime(2025, 9, 2, 15, 27, 39, 87403, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 9, 2, 15, 27, 39, 87407, tzinfo=datetime.timezone.utc))
2025-09-02 10:27:39 | INFO | sqlalchemy.engine.Engine | COMMIT
2025-09-02 10:27:47 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 10:27:47 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.email = $1::VARCHAR
2025-09-02 10:27:47 | INFO | sqlalchemy.engine.Engine | [generated in 0.00325s] ('system@example.com',)
2025-09-02 10:27:47 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 10:28:09 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 10:28:09 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 10:28:09 | INFO | sqlalchemy.engine.Engine | [generated in 0.01437s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 10:28:09 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM (SELECT payment_terms.id AS id, payment_terms.code AS code, payment_terms.name AS name, payment_terms.description AS description, payment_terms.days AS days, payment_terms.active AS active, payment_terms.user_id AS user_id, payment_terms.created_at AS created_at, payment_terms.updated_at AS updated_at 
FROM payment_terms) AS anon_1
2025-09-02 10:28:09 | INFO | sqlalchemy.engine.Engine | [generated in 0.00444s] ()
2025-09-02 10:28:09 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.days, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms ORDER BY payment_terms.name 
 LIMIT $1::INTEGER OFFSET $2::INTEGER
2025-09-02 10:28:09 | INFO | sqlalchemy.engine.Engine | [generated in 0.00190s] (5, 0)
2025-09-02 10:28:09 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 10:28:09 | INFO | sqlalchemy.engine.Engine | [generated in 0.00141s] ('audit_level',)
2025-09-02 10:28:09 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 10:28:53 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 10:28:53 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 10:28:53 | INFO | sqlalchemy.engine.Engine | [cached since 44.39s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 10:28:53 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM (SELECT payment_terms.id AS id, payment_terms.code AS code, payment_terms.name AS name, payment_terms.description AS description, payment_terms.days AS days, payment_terms.active AS active, payment_terms.user_id AS user_id, payment_terms.created_at AS created_at, payment_terms.updated_at AS updated_at 
FROM payment_terms) AS anon_1
2025-09-02 10:28:53 | INFO | sqlalchemy.engine.Engine | [cached since 44.36s ago] ()
2025-09-02 10:28:53 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.days, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms ORDER BY payment_terms.name 
 LIMIT $1::INTEGER OFFSET $2::INTEGER
2025-09-02 10:28:53 | INFO | sqlalchemy.engine.Engine | [generated in 0.00281s] (5, 0)
2025-09-02 10:28:53 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 10:28:53 | INFO | sqlalchemy.engine.Engine | [cached since 44.34s ago] ('audit_level',)
2025-09-02 10:28:53 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 10:32:46 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 10:32:46 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 10:32:46 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 10:32:46 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 10:32:46 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 10:32:46 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 10:32:46 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 10:32:46 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 10:32:46 | INFO | sqlalchemy.engine.Engine | [generated in 0.00225s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 10:32:46 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM (SELECT payment_terms.id AS id, payment_terms.code AS code, payment_terms.name AS name, payment_terms.description AS description, payment_terms.days AS days, payment_terms.active AS active, payment_terms.user_id AS user_id, payment_terms.created_at AS created_at, payment_terms.updated_at AS updated_at 
FROM payment_terms) AS anon_1
2025-09-02 10:32:46 | INFO | sqlalchemy.engine.Engine | [generated in 0.00350s] ()
2025-09-02 10:32:46 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.days, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms ORDER BY payment_terms.name 
 LIMIT $1::INTEGER OFFSET $2::INTEGER
2025-09-02 10:32:46 | INFO | sqlalchemy.engine.Engine | [generated in 0.00363s] (5, 0)
2025-09-02 10:32:46 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 10:32:46 | INFO | sqlalchemy.engine.Engine | [generated in 0.00302s] ('audit_level',)
2025-09-02 10:32:46 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 10:40:30 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 10:40:30 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 10:40:30 | INFO | sqlalchemy.engine.Engine | [cached since 463.7s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 10:40:30 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM (SELECT payment_terms.id AS id, payment_terms.code AS code, payment_terms.name AS name, payment_terms.description AS description, payment_terms.days AS days, payment_terms.active AS active, payment_terms.user_id AS user_id, payment_terms.created_at AS created_at, payment_terms.updated_at AS updated_at 
FROM payment_terms) AS anon_1
2025-09-02 10:40:30 | INFO | sqlalchemy.engine.Engine | [cached since 463.7s ago] ()
2025-09-02 10:40:30 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.days, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms ORDER BY payment_terms.name 
 LIMIT $1::INTEGER OFFSET $2::INTEGER
2025-09-02 10:40:30 | INFO | sqlalchemy.engine.Engine | [generated in 0.00263s] (5, 0)
2025-09-02 10:40:30 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 10:40:30 | INFO | sqlalchemy.engine.Engine | [cached since 463.7s ago] ('audit_level',)
2025-09-02 10:40:30 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 10:40:46 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 10:40:46 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 10:40:46 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 10:40:46 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 10:40:46 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 10:40:46 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 10:40:46 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 10:40:47 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 10:40:47 | INFO | sqlalchemy.engine.Engine | [generated in 0.00100s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 10:40:47 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM (SELECT payment_terms.id AS id, payment_terms.code AS code, payment_terms.name AS name, payment_terms.description AS description, payment_terms.days AS days, payment_terms.active AS active, payment_terms.user_id AS user_id, payment_terms.created_at AS created_at, payment_terms.updated_at AS updated_at 
FROM payment_terms) AS anon_1
2025-09-02 10:40:47 | INFO | sqlalchemy.engine.Engine | [generated in 0.00545s] ()
2025-09-02 10:40:47 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.days, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms ORDER BY payment_terms.name 
 LIMIT $1::INTEGER OFFSET $2::INTEGER
2025-09-02 10:40:47 | INFO | sqlalchemy.engine.Engine | [generated in 0.00178s] (5, 0)
2025-09-02 10:40:47 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 10:40:47 | INFO | sqlalchemy.engine.Engine | [generated in 0.00550s] ('audit_level',)
2025-09-02 10:40:47 | INFO | sqlalchemy.engine.Engine | COMMIT
2025-09-02 11:09:36 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:09:36 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:09:36 | INFO | sqlalchemy.engine.Engine | [cached since 1730s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:09:36 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM (SELECT payment_terms.id AS id, payment_terms.code AS code, payment_terms.name AS name, payment_terms.description AS description, payment_terms.days AS days, payment_terms.active AS active, payment_terms.user_id AS user_id, payment_terms.created_at AS created_at, payment_terms.updated_at AS updated_at 
FROM payment_terms) AS anon_1
2025-09-02 11:09:36 | INFO | sqlalchemy.engine.Engine | [cached since 1730s ago] ()
2025-09-02 11:09:36 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.days, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms ORDER BY payment_terms.name 
 LIMIT $1::INTEGER OFFSET $2::INTEGER
2025-09-02 11:09:36 | INFO | sqlalchemy.engine.Engine | [generated in 0.00124s] (5, 0)
2025-09-02 11:09:36 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 11:09:36 | INFO | sqlalchemy.engine.Engine | [cached since 1729s ago] ('audit_level',)
2025-09-02 11:09:36 | INFO | sqlalchemy.engine.Engine | COMMIT
2025-09-02 11:13:08 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 11:13:08 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:13:08 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 11:13:08 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:13:08 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 11:13:08 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:13:08 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:13:08 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:13:08 | INFO | sqlalchemy.engine.Engine | [generated in 0.00109s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:13:08 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM (SELECT payment_terms.id AS id, payment_terms.code AS code, payment_terms.name AS name, payment_terms.description AS description, payment_terms.net_days AS net_days, payment_terms.discount_percent AS discount_percent, payment_terms.discount_days AS discount_days, payment_terms.basis AS basis, payment_terms.active AS active, payment_terms.user_id AS user_id, payment_terms.created_at AS created_at, payment_terms.updated_at AS updated_at 
FROM payment_terms) AS anon_1
2025-09-02 11:13:08 | INFO | sqlalchemy.engine.Engine | [generated in 0.00151s] ()
2025-09-02 11:13:08 | ERROR | app.crud.payment_term | Error de base de datos en get_payment_terms: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: no existe la columna payment_terms.net_days
[SQL: SELECT count(*) AS count_1 
FROM (SELECT payment_terms.id AS id, payment_terms.code AS code, payment_terms.name AS name, payment_terms.description AS description, payment_terms.net_days AS net_days, payment_terms.discount_percent AS discount_percent, payment_terms.discount_days AS discount_days, payment_terms.basis AS basis, payment_terms.active AS active, payment_terms.user_id AS user_id, payment_terms.created_at AS created_at, payment_terms.updated_at AS updated_at 
FROM payment_terms) AS anon_1]
(Background on this error at: https://sqlalche.me/e/20/f405)
Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 521, in _prepare_and_execute
    prepared_stmt, attributes = await adapt_connection._prepare(
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        operation, self._invalidate_schema_cache_asof
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 768, in _prepare
    prepared_stmt = await self._connection.prepare(
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        operation, name=self._prepared_statement_name_func()
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\connection.py", line 635, in prepare
    return await self._prepare(
           ^^^^^^^^^^^^^^^^^^^^
    ...<5 lines>...
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\connection.py", line 653, in _prepare
    stmt = await self._get_statement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<5 lines>...
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\connection.py", line 432, in _get_statement
    statement = await self._protocol.prepare(
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<5 lines>...
    )
    ^
  File "asyncpg\\protocol\\protocol.pyx", line 165, in prepare
asyncpg.exceptions.UndefinedColumnError: no existe la columna payment_terms.net_days

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1963, in _exec_single_context
    self.dialect.do_execute(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        cursor, str_statement, effective_parameters, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 943, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 580, in execute
    self._adapt_connection.await_(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._prepare_and_execute(operation, parameters)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 132, in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 196, in greenlet_spawn
    value = await result
            ^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 558, in _prepare_and_execute
    self._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 508, in _handle_exception
    self._adapt_connection._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 792, in _handle_exception
    raise translated_error from error
sqlalchemy.dialects.postgresql.asyncpg.AsyncAdapt_asyncpg_dbapi.ProgrammingError: <class 'asyncpg.exceptions.UndefinedColumnError'>: no existe la columna payment_terms.net_days

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 83, in get_payment_terms
    total_result = await db.execute(total_query)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\ext\asyncio\session.py", line 463, in execute
    result = await greenlet_spawn(
             ^^^^^^^^^^^^^^^^^^^^^
    ...<6 lines>...
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 201, in greenlet_spawn
    result = context.throw(*sys.exc_info())
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ~~~~~~~~~~~~~~~~~~~~~~^
        statement,
        ^^^^^^^^^^
    ...<4 lines>...
        _add_event=_add_event,
        ^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self,
        ^^^^^
    ...<4 lines>...
        conn,
        ^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\context.py", line 306, in orm_execute_statement
    result = conn.execute(
        statement, params or {}, execution_options=execution_options
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1415, in execute
    return meth(
        self,
        distilled_parameters,
        execution_options or NO_OPTIONS,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self, distilled_params, execution_options
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1637, in _execute_clauseelement
    ret = self._execute_context(
        dialect,
    ...<8 lines>...
        cache_hit=cache_hit,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1842, in _execute_context
    return self._exec_single_context(
           ~~~~~~~~~~~~~~~~~~~~~~~~~^
        dialect, context, statement, parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1982, in _exec_single_context
    self._handle_dbapi_exception(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        e, str_statement, effective_parameters, cursor, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 2351, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1963, in _exec_single_context
    self.dialect.do_execute(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        cursor, str_statement, effective_parameters, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 943, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 580, in execute
    self._adapt_connection.await_(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._prepare_and_execute(operation, parameters)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 132, in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 196, in greenlet_spawn
    value = await result
            ^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 558, in _prepare_and_execute
    self._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 508, in _handle_exception
    self._adapt_connection._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 792, in _handle_exception
    raise translated_error from error
sqlalchemy.exc.ProgrammingError: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: no existe la columna payment_terms.net_days
[SQL: SELECT count(*) AS count_1 
FROM (SELECT payment_terms.id AS id, payment_terms.code AS code, payment_terms.name AS name, payment_terms.description AS description, payment_terms.net_days AS net_days, payment_terms.discount_percent AS discount_percent, payment_terms.discount_days AS discount_days, payment_terms.basis AS basis, payment_terms.active AS active, payment_terms.user_id AS user_id, payment_terms.created_at AS created_at, payment_terms.updated_at AS updated_at 
FROM payment_terms) AS anon_1]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-09-02 11:13:08 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 11:14:26 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 11:14:26 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:14:26 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 11:14:26 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:14:26 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 11:14:26 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:14:26 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:14:26 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:14:26 | INFO | sqlalchemy.engine.Engine | [generated in 0.00409s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:14:26 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM (SELECT payment_terms.id AS id, payment_terms.code AS code, payment_terms.name AS name, payment_terms.description AS description, payment_terms.net_days AS net_days, payment_terms.discount_percent AS discount_percent, payment_terms.discount_days AS discount_days, payment_terms.basis AS basis, payment_terms.active AS active, payment_terms.user_id AS user_id, payment_terms.created_at AS created_at, payment_terms.updated_at AS updated_at 
FROM payment_terms) AS anon_1
2025-09-02 11:14:26 | INFO | sqlalchemy.engine.Engine | [generated in 0.00243s] ()
2025-09-02 11:14:26 | ERROR | app.crud.payment_term | Error de base de datos en get_payment_terms: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: no existe la columna payment_terms.net_days
[SQL: SELECT count(*) AS count_1 
FROM (SELECT payment_terms.id AS id, payment_terms.code AS code, payment_terms.name AS name, payment_terms.description AS description, payment_terms.net_days AS net_days, payment_terms.discount_percent AS discount_percent, payment_terms.discount_days AS discount_days, payment_terms.basis AS basis, payment_terms.active AS active, payment_terms.user_id AS user_id, payment_terms.created_at AS created_at, payment_terms.updated_at AS updated_at 
FROM payment_terms) AS anon_1]
(Background on this error at: https://sqlalche.me/e/20/f405)
Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 521, in _prepare_and_execute
    prepared_stmt, attributes = await adapt_connection._prepare(
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        operation, self._invalidate_schema_cache_asof
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 768, in _prepare
    prepared_stmt = await self._connection.prepare(
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        operation, name=self._prepared_statement_name_func()
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\connection.py", line 635, in prepare
    return await self._prepare(
           ^^^^^^^^^^^^^^^^^^^^
    ...<5 lines>...
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\connection.py", line 653, in _prepare
    stmt = await self._get_statement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<5 lines>...
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\connection.py", line 432, in _get_statement
    statement = await self._protocol.prepare(
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<5 lines>...
    )
    ^
  File "asyncpg\\protocol\\protocol.pyx", line 165, in prepare
asyncpg.exceptions.UndefinedColumnError: no existe la columna payment_terms.net_days

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1963, in _exec_single_context
    self.dialect.do_execute(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        cursor, str_statement, effective_parameters, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 943, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 580, in execute
    self._adapt_connection.await_(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._prepare_and_execute(operation, parameters)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 132, in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 196, in greenlet_spawn
    value = await result
            ^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 558, in _prepare_and_execute
    self._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 508, in _handle_exception
    self._adapt_connection._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 792, in _handle_exception
    raise translated_error from error
sqlalchemy.dialects.postgresql.asyncpg.AsyncAdapt_asyncpg_dbapi.ProgrammingError: <class 'asyncpg.exceptions.UndefinedColumnError'>: no existe la columna payment_terms.net_days

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 83, in get_payment_terms
    total_result = await db.execute(total_query)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\ext\asyncio\session.py", line 463, in execute
    result = await greenlet_spawn(
             ^^^^^^^^^^^^^^^^^^^^^
    ...<6 lines>...
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 201, in greenlet_spawn
    result = context.throw(*sys.exc_info())
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ~~~~~~~~~~~~~~~~~~~~~~^
        statement,
        ^^^^^^^^^^
    ...<4 lines>...
        _add_event=_add_event,
        ^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self,
        ^^^^^
    ...<4 lines>...
        conn,
        ^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\context.py", line 306, in orm_execute_statement
    result = conn.execute(
        statement, params or {}, execution_options=execution_options
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1415, in execute
    return meth(
        self,
        distilled_parameters,
        execution_options or NO_OPTIONS,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self, distilled_params, execution_options
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1637, in _execute_clauseelement
    ret = self._execute_context(
        dialect,
    ...<8 lines>...
        cache_hit=cache_hit,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1842, in _execute_context
    return self._exec_single_context(
           ~~~~~~~~~~~~~~~~~~~~~~~~~^
        dialect, context, statement, parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1982, in _exec_single_context
    self._handle_dbapi_exception(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        e, str_statement, effective_parameters, cursor, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 2351, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1963, in _exec_single_context
    self.dialect.do_execute(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        cursor, str_statement, effective_parameters, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 943, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 580, in execute
    self._adapt_connection.await_(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._prepare_and_execute(operation, parameters)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 132, in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 196, in greenlet_spawn
    value = await result
            ^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 558, in _prepare_and_execute
    self._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 508, in _handle_exception
    self._adapt_connection._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 792, in _handle_exception
    raise translated_error from error
sqlalchemy.exc.ProgrammingError: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: no existe la columna payment_terms.net_days
[SQL: SELECT count(*) AS count_1 
FROM (SELECT payment_terms.id AS id, payment_terms.code AS code, payment_terms.name AS name, payment_terms.description AS description, payment_terms.net_days AS net_days, payment_terms.discount_percent AS discount_percent, payment_terms.discount_days AS discount_days, payment_terms.basis AS basis, payment_terms.active AS active, payment_terms.user_id AS user_id, payment_terms.created_at AS created_at, payment_terms.updated_at AS updated_at 
FROM payment_terms) AS anon_1]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-09-02 11:14:26 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 11:14:26 | ERROR | app.routers.payment_term | Error inesperado al listar términos de pago
Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 521, in _prepare_and_execute
    prepared_stmt, attributes = await adapt_connection._prepare(
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        operation, self._invalidate_schema_cache_asof
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 768, in _prepare
    prepared_stmt = await self._connection.prepare(
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        operation, name=self._prepared_statement_name_func()
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\connection.py", line 635, in prepare
    return await self._prepare(
           ^^^^^^^^^^^^^^^^^^^^
    ...<5 lines>...
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\connection.py", line 653, in _prepare
    stmt = await self._get_statement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<5 lines>...
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\connection.py", line 432, in _get_statement
    statement = await self._protocol.prepare(
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<5 lines>...
    )
    ^
  File "asyncpg\\protocol\\protocol.pyx", line 165, in prepare
asyncpg.exceptions.UndefinedColumnError: no existe la columna payment_terms.net_days

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1963, in _exec_single_context
    self.dialect.do_execute(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        cursor, str_statement, effective_parameters, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 943, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 580, in execute
    self._adapt_connection.await_(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._prepare_and_execute(operation, parameters)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 132, in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 196, in greenlet_spawn
    value = await result
            ^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 558, in _prepare_and_execute
    self._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 508, in _handle_exception
    self._adapt_connection._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 792, in _handle_exception
    raise translated_error from error
sqlalchemy.dialects.postgresql.asyncpg.AsyncAdapt_asyncpg_dbapi.ProgrammingError: <class 'asyncpg.exceptions.UndefinedColumnError'>: no existe la columna payment_terms.net_days

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 83, in get_payment_terms
    total_result = await db.execute(total_query)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\ext\asyncio\session.py", line 463, in execute
    result = await greenlet_spawn(
             ^^^^^^^^^^^^^^^^^^^^^
    ...<6 lines>...
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 201, in greenlet_spawn
    result = context.throw(*sys.exc_info())
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ~~~~~~~~~~~~~~~~~~~~~~^
        statement,
        ^^^^^^^^^^
    ...<4 lines>...
        _add_event=_add_event,
        ^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self,
        ^^^^^
    ...<4 lines>...
        conn,
        ^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\context.py", line 306, in orm_execute_statement
    result = conn.execute(
        statement, params or {}, execution_options=execution_options
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1415, in execute
    return meth(
        self,
        distilled_parameters,
        execution_options or NO_OPTIONS,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self, distilled_params, execution_options
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1637, in _execute_clauseelement
    ret = self._execute_context(
        dialect,
    ...<8 lines>...
        cache_hit=cache_hit,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1842, in _execute_context
    return self._exec_single_context(
           ~~~~~~~~~~~~~~~~~~~~~~~~~^
        dialect, context, statement, parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1982, in _exec_single_context
    self._handle_dbapi_exception(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        e, str_statement, effective_parameters, cursor, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 2351, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1963, in _exec_single_context
    self.dialect.do_execute(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        cursor, str_statement, effective_parameters, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 943, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 580, in execute
    self._adapt_connection.await_(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._prepare_and_execute(operation, parameters)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 132, in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 196, in greenlet_spawn
    value = await result
            ^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 558, in _prepare_and_execute
    self._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 508, in _handle_exception
    self._adapt_connection._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 792, in _handle_exception
    raise translated_error from error
sqlalchemy.exc.ProgrammingError: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: no existe la columna payment_terms.net_days
[SQL: SELECT count(*) AS count_1 
FROM (SELECT payment_terms.id AS id, payment_terms.code AS code, payment_terms.name AS name, payment_terms.description AS description, payment_terms.net_days AS net_days, payment_terms.discount_percent AS discount_percent, payment_terms.discount_days AS discount_days, payment_terms.basis AS basis, payment_terms.active AS active, payment_terms.user_id AS user_id, payment_terms.created_at AS created_at, payment_terms.updated_at AS updated_at 
FROM payment_terms) AS anon_1]
(Background on this error at: https://sqlalche.me/e/20/f405)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\routers\payment_term.py", line 96, in list_payment_terms
    result = await get_payment_terms(db, skip, limit, search, active, current_user.id)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 107, in get_payment_terms
    raise HTTPException(
    ...<2 lines>...
    )
fastapi.exceptions.HTTPException: 500: Error al obtener términos de pago
2025-09-02 11:17:53 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 11:17:53 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:17:53 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 11:17:53 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:17:53 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 11:17:53 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:17:53 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:17:53 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:17:53 | INFO | sqlalchemy.engine.Engine | [generated in 0.00128s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:17:53 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM (SELECT payment_terms.id AS id, payment_terms.code AS code, payment_terms.name AS name, payment_terms.description AS description, payment_terms.net_days AS net_days, payment_terms.discount_percent AS discount_percent, payment_terms.discount_days AS discount_days, payment_terms.basis AS basis, payment_terms.active AS active, payment_terms.user_id AS user_id, payment_terms.created_at AS created_at, payment_terms.updated_at AS updated_at 
FROM payment_terms) AS anon_1
2025-09-02 11:17:53 | INFO | sqlalchemy.engine.Engine | [generated in 0.00156s] ()
2025-09-02 11:17:53 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms ORDER BY payment_terms.name 
 LIMIT $1::INTEGER OFFSET $2::INTEGER
2025-09-02 11:17:53 | INFO | sqlalchemy.engine.Engine | [generated in 0.00647s] (5, 0)
2025-09-02 11:17:53 | ERROR | app.crud.payment_term | Error inesperado en get_payment_terms
Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 93, in get_payment_terms
    audit_level = await get_audit_level(db)
                        ^^^^^^^^^^^^^^^
NameError: name 'get_audit_level' is not defined
2025-09-02 11:17:53 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 11:17:53 | ERROR | app.routers.payment_term | Error inesperado al listar términos de pago
Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 93, in get_payment_terms
    audit_level = await get_audit_level(db)
                        ^^^^^^^^^^^^^^^
NameError: name 'get_audit_level' is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\routers\payment_term.py", line 96, in list_payment_terms
    result = await get_payment_terms(db, skip, limit, search, active, current_user.id)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 113, in get_payment_terms
    raise HTTPException(
    ...<2 lines>...
    )
fastapi.exceptions.HTTPException: 500: Error inesperado al obtener términos de pago
2025-09-02 11:18:12 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 11:18:12 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:18:12 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 11:18:12 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:18:12 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 11:18:12 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:18:12 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:18:12 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:18:12 | INFO | sqlalchemy.engine.Engine | [generated in 0.00342s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:18:12 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM (SELECT payment_terms.id AS id, payment_terms.code AS code, payment_terms.name AS name, payment_terms.description AS description, payment_terms.net_days AS net_days, payment_terms.discount_percent AS discount_percent, payment_terms.discount_days AS discount_days, payment_terms.basis AS basis, payment_terms.active AS active, payment_terms.user_id AS user_id, payment_terms.created_at AS created_at, payment_terms.updated_at AS updated_at 
FROM payment_terms) AS anon_1
2025-09-02 11:18:12 | INFO | sqlalchemy.engine.Engine | [generated in 0.00152s] ()
2025-09-02 11:18:12 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms ORDER BY payment_terms.name 
 LIMIT $1::INTEGER OFFSET $2::INTEGER
2025-09-02 11:18:12 | INFO | sqlalchemy.engine.Engine | [generated in 0.00244s] (5, 0)
2025-09-02 11:18:12 | ERROR | app.crud.payment_term | Error inesperado en get_payment_terms
Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 93, in get_payment_terms
    audit_level = await get_audit_level(db)
                        ^^^^^^^^^^^^^^^
NameError: name 'get_audit_level' is not defined
2025-09-02 11:18:12 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 11:18:12 | ERROR | app.routers.payment_term | Error inesperado al listar términos de pago
Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 93, in get_payment_terms
    audit_level = await get_audit_level(db)
                        ^^^^^^^^^^^^^^^
NameError: name 'get_audit_level' is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\routers\payment_term.py", line 96, in list_payment_terms
    result = await get_payment_terms(db, skip, limit, search, active, current_user.id)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 113, in get_payment_terms
    raise HTTPException(
    ...<2 lines>...
    )
fastapi.exceptions.HTTPException: 500: Error inesperado al obtener términos de pago
2025-09-02 11:20:34 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 11:20:34 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:20:34 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 11:20:34 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:20:34 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 11:20:34 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:20:34 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:20:34 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:20:34 | INFO | sqlalchemy.engine.Engine | [generated in 0.00106s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:20:34 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM (SELECT payment_terms.id AS id, payment_terms.code AS code, payment_terms.name AS name, payment_terms.description AS description, payment_terms.net_days AS net_days, payment_terms.discount_percent AS discount_percent, payment_terms.discount_days AS discount_days, payment_terms.basis AS basis, payment_terms.active AS active, payment_terms.user_id AS user_id, payment_terms.created_at AS created_at, payment_terms.updated_at AS updated_at 
FROM payment_terms) AS anon_1
2025-09-02 11:20:34 | INFO | sqlalchemy.engine.Engine | [generated in 0.00388s] ()
2025-09-02 11:20:34 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms ORDER BY payment_terms.name 
 LIMIT $1::INTEGER OFFSET $2::INTEGER
2025-09-02 11:20:34 | INFO | sqlalchemy.engine.Engine | [generated in 0.00152s] (5, 0)
2025-09-02 11:20:34 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 11:20:34 | INFO | sqlalchemy.engine.Engine | [generated in 0.00250s] ('audit_level',)
2025-09-02 11:20:34 | INFO | sqlalchemy.engine.Engine | COMMIT
2025-09-02 11:20:50 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:20:50 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:20:50 | INFO | sqlalchemy.engine.Engine | [cached since 16.26s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:20:50 | INFO | sqlalchemy.engine.Engine | INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at
2025-09-02 11:20:50 | INFO | sqlalchemy.engine.Engine | [generated in 0.00143s] (UUID('34b6634a-5fca-410a-8410-7f0d3fb81efd'), 'EOM302', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'))
2025-09-02 11:20:50 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 11:20:50 | INFO | sqlalchemy.engine.Engine | [cached since 16.26s ago] ('audit_level',)
2025-09-02 11:20:50 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 11:20:50 | ERROR | app.crud.payment_term | Error al crear término de pago
Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 39, in create_payment_term
    return payment_term, log
                         ^^^
UnboundLocalError: cannot access local variable 'log' where it is not associated with a value
2025-09-02 11:20:50 | ERROR | app.routers.payment_term | Error interno al crear término de pago
Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\routers\payment_term.py", line 42, in create_payment_term_endpoint
    new_payment_term, log = await create_payment_term(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
        db, payment_term_in.model_dump(), current_user.id
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 39, in create_payment_term
    return payment_term, log
                         ^^^
UnboundLocalError: cannot access local variable 'log' where it is not associated with a value
2025-09-02 11:24:12 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:24:12 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:24:12 | INFO | sqlalchemy.engine.Engine | [cached since 218.8s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:24:12 | INFO | sqlalchemy.engine.Engine | INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at
2025-09-02 11:24:12 | INFO | sqlalchemy.engine.Engine | [cached since 202.5s ago] (UUID('7f8545a2-4c4d-46f1-8ead-fdd083573273'), 'EOM302', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'))
2025-09-02 11:24:12 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 11:24:12 | INFO | sqlalchemy.engine.Engine | [cached since 218.8s ago] ('audit_level',)
2025-09-02 11:24:12 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 11:24:12 | ERROR | app.crud.payment_term | Error al crear término de pago
Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 39, in create_payment_term
UnboundLocalError: cannot access local variable 'log' where it is not associated with a value
2025-09-02 11:24:12 | ERROR | app.routers.payment_term | Error interno al crear término de pago
Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\routers\payment_term.py", line 42, in create_payment_term_endpoint
    new_payment_term, log = await create_payment_term(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
        db, payment_term_in.model_dump(), current_user.id
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 39, in create_payment_term
UnboundLocalError: cannot access local variable 'log' where it is not associated with a value
2025-09-02 11:24:22 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 11:24:22 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:24:22 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 11:24:22 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:24:22 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 11:24:22 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:24:22 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:24:22 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:24:22 | INFO | sqlalchemy.engine.Engine | [generated in 0.00097s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:24:22 | INFO | sqlalchemy.engine.Engine | INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at
2025-09-02 11:24:22 | INFO | sqlalchemy.engine.Engine | [generated in 0.00310s] (UUID('431bd3c1-7ac8-4683-9e60-f614609ef863'), 'EOM302', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'))
2025-09-02 11:24:22 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 11:24:22 | INFO | sqlalchemy.engine.Engine | [generated in 0.00378s] ('audit_level',)
2025-09-02 11:24:22 | INFO | sqlalchemy.engine.Engine | COMMIT
2025-09-02 11:24:22 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:24:22 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.id = $1::UUID
2025-09-02 11:24:22 | INFO | sqlalchemy.engine.Engine | [generated in 0.00133s] (UUID('431bd3c1-7ac8-4683-9e60-f614609ef863'),)
2025-09-02 11:24:22 | INFO | app.routers.payment_term | Término de pago creado exitosamente: 431bd3c1-7ac8-4683-9e60-f614609ef863 - Fin de mes + 302 por usuario a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac
2025-09-02 11:24:22 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 11:25:02 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:25:02 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:25:02 | INFO | sqlalchemy.engine.Engine | [cached since 40.07s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:25:02 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.id = $1::UUID
2025-09-02 11:25:02 | INFO | sqlalchemy.engine.Engine | [generated in 0.00146s] (UUID('431bd3c1-7ac8-4683-9e60-f614609ef863'),)
2025-09-02 11:25:02 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 11:25:02 | INFO | sqlalchemy.engine.Engine | [cached since 40.06s ago] ('audit_level',)
2025-09-02 11:25:02 | INFO | sqlalchemy.engine.Engine | COMMIT
2025-09-02 11:25:07 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:25:07 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:25:07 | INFO | sqlalchemy.engine.Engine | [cached since 44.8s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:25:07 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM (SELECT payment_terms.id AS id, payment_terms.code AS code, payment_terms.name AS name, payment_terms.description AS description, payment_terms.net_days AS net_days, payment_terms.discount_percent AS discount_percent, payment_terms.discount_days AS discount_days, payment_terms.basis AS basis, payment_terms.active AS active, payment_terms.user_id AS user_id, payment_terms.created_at AS created_at, payment_terms.updated_at AS updated_at 
FROM payment_terms) AS anon_1
2025-09-02 11:25:07 | INFO | sqlalchemy.engine.Engine | [generated in 0.00503s] ()
2025-09-02 11:25:07 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms ORDER BY payment_terms.name 
 LIMIT $1::INTEGER OFFSET $2::INTEGER
2025-09-02 11:25:07 | INFO | sqlalchemy.engine.Engine | [generated in 0.00560s] (5, 0)
2025-09-02 11:25:07 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 11:25:07 | INFO | sqlalchemy.engine.Engine | [cached since 44.82s ago] ('audit_level',)
2025-09-02 11:25:07 | INFO | sqlalchemy.engine.Engine | COMMIT
2025-09-02 11:26:08 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:26:08 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:26:08 | INFO | sqlalchemy.engine.Engine | [cached since 105.3s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:26:08 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.id = $1::UUID
2025-09-02 11:26:08 | INFO | sqlalchemy.engine.Engine | [cached since 65.19s ago] (UUID('431bd3c1-7ac8-4683-9e60-f614609ef863'),)
2025-09-02 11:26:08 | INFO | sqlalchemy.engine.Engine | UPDATE payment_terms SET active=$1::BOOLEAN, updated_at=$2::TIMESTAMP WITH TIME ZONE WHERE payment_terms.id = $3::UUID
2025-09-02 11:26:08 | INFO | sqlalchemy.engine.Engine | [generated in 0.00074s] (False, datetime.datetime(2025, 9, 2, 16, 26, 8, 121561), UUID('431bd3c1-7ac8-4683-9e60-f614609ef863'))
2025-09-02 11:26:08 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 11:26:08 | INFO | sqlalchemy.engine.Engine | [cached since 105.3s ago] ('audit_level',)
2025-09-02 11:26:08 | INFO | sqlalchemy.engine.Engine | INSERT INTO audit_logs (id, action, entity, entity_id, description, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::UUID, $5::VARCHAR, $6::UUID) RETURNING audit_logs.created_at
2025-09-02 11:26:08 | INFO | sqlalchemy.engine.Engine | [generated in 0.00093s] (UUID('a2582067-bdd6-4cac-aaa0-a4d42582c330'), 'UPDATE', 'PaymentTerm', UUID('431bd3c1-7ac8-4683-9e60-f614609ef863'), "Cambios en término de pago: active: 'True' → 'False'", UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'))
2025-09-02 11:26:08 | INFO | sqlalchemy.engine.Engine | COMMIT
2025-09-02 11:26:08 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:26:08 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.id = $1::UUID
2025-09-02 11:26:08 | INFO | sqlalchemy.engine.Engine | [cached since 105.3s ago] (UUID('431bd3c1-7ac8-4683-9e60-f614609ef863'),)
2025-09-02 11:26:08 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 11:26:45 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:26:45 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:26:45 | INFO | sqlalchemy.engine.Engine | [cached since 143.1s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:26:45 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.id = $1::UUID
2025-09-02 11:26:45 | INFO | sqlalchemy.engine.Engine | [cached since 103s ago] (UUID('431bd3c1-7ac8-4683-9e60-f614609ef863'),)
2025-09-02 11:26:45 | INFO | sqlalchemy.engine.Engine | COMMIT
2025-09-02 11:26:45 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:26:45 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.id = $1::UUID
2025-09-02 11:26:45 | INFO | sqlalchemy.engine.Engine | [cached since 143.1s ago] (UUID('431bd3c1-7ac8-4683-9e60-f614609ef863'),)
2025-09-02 11:26:45 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 11:34:59 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:34:59 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.email = $1::VARCHAR
2025-09-02 11:34:59 | INFO | sqlalchemy.engine.Engine | [generated in 0.00121s] ('system@example.com',)
2025-09-02 11:34:59 | WARNING | passlib.handlers.bcrypt | (trapped) error reading bcrypt version
Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\passlib\handlers\bcrypt.py", line 620, in _load_backend_mixin
    version = _bcrypt.__about__.__version__
              ^^^^^^^^^^^^^^^^^
AttributeError: module 'bcrypt' has no attribute '__about__'
2025-09-02 11:34:59 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 11:35:38 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:35:38 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.email = $1::VARCHAR
2025-09-02 11:35:38 | INFO | sqlalchemy.engine.Engine | [cached since 39.16s ago] ('system@example.com',)
2025-09-02 11:35:38 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 11:36:43 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 11:36:43 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:36:43 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 11:36:43 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:36:43 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 11:36:43 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:36:43 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:36:43 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.email = $1::VARCHAR
2025-09-02 11:36:43 | INFO | sqlalchemy.engine.Engine | [generated in 0.00137s] ('system@example.com',)
2025-09-02 11:36:43 | WARNING | passlib.handlers.bcrypt | (trapped) error reading bcrypt version
Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\passlib\handlers\bcrypt.py", line 620, in _load_backend_mixin
    version = _bcrypt.__about__.__version__
              ^^^^^^^^^^^^^^^^^
AttributeError: module 'bcrypt' has no attribute '__about__'
2025-09-02 11:36:43 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 11:37:22 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:37:22 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:37:22 | INFO | sqlalchemy.engine.Engine | [generated in 0.00257s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:37:22 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.id = $1::UUID
2025-09-02 11:37:22 | INFO | sqlalchemy.engine.Engine | [generated in 0.00233s] (UUID('431bd3c1-7ac8-4683-9e60-f614609ef863'),)
2025-09-02 11:37:22 | INFO | sqlalchemy.engine.Engine | UPDATE payment_terms SET active=$1::BOOLEAN, updated_at=$2::TIMESTAMP WITH TIME ZONE WHERE payment_terms.id = $3::UUID
2025-09-02 11:37:22 | INFO | sqlalchemy.engine.Engine | [generated in 0.00328s] (True, datetime.datetime(2025, 9, 2, 16, 37, 22, 377259), UUID('431bd3c1-7ac8-4683-9e60-f614609ef863'))
2025-09-02 11:37:22 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 11:37:22 | INFO | sqlalchemy.engine.Engine | [generated in 0.00361s] ('audit_level',)
2025-09-02 11:37:22 | INFO | sqlalchemy.engine.Engine | INSERT INTO audit_logs (id, action, entity, entity_id, description, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::UUID, $5::VARCHAR, $6::UUID) RETURNING audit_logs.created_at
2025-09-02 11:37:22 | INFO | sqlalchemy.engine.Engine | [generated in 0.00792s] (UUID('fc88978d-2af9-4a64-91cd-da9775e50683'), 'PATCH', 'PaymentTerm', UUID('431bd3c1-7ac8-4683-9e60-f614609ef863'), "Actualización parcial: active: 'False' → 'True'", UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'))
2025-09-02 11:37:22 | INFO | sqlalchemy.engine.Engine | COMMIT
2025-09-02 11:37:22 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:37:22 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.id = $1::UUID
2025-09-02 11:37:22 | INFO | sqlalchemy.engine.Engine | [generated in 0.00666s] (UUID('431bd3c1-7ac8-4683-9e60-f614609ef863'),)
2025-09-02 11:37:22 | INFO | app.routers.payment_term | Término de pago 431bd3c1-7ac8-4683-9e60-f614609ef863 actualizado parcialmente correctamente.
2025-09-02 11:37:22 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 11:39:54 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:39:54 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:39:54 | INFO | sqlalchemy.engine.Engine | [cached since 151.8s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:39:54 | INFO | sqlalchemy.engine.Engine | INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at
2025-09-02 11:39:54 | INFO | sqlalchemy.engine.Engine | [generated in 0.00417s] (UUID('7fc33026-4740-40cc-9452-ebd1b07c12f1'), 'EOM302', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'))
2025-09-02 11:39:54 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 11:39:54 | ERROR | app.crud.payment_term | Error de integridad al crear término de pago: (sqlalchemy.dialects.postgresql.asyncpg.IntegrityError) <class 'asyncpg.exceptions.UniqueViolationError'>: llave duplicada viola restricción de unicidad «ix_payment_terms_code»
DETAIL:  Ya existe la llave (code)=(EOM302).
[SQL: INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at]
[parameters: (UUID('7fc33026-4740-40cc-9452-ebd1b07c12f1'), 'EOM302', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'))]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 545, in _prepare_and_execute
    self._rows = deque(await prepared_stmt.fetch(*parameters))
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\prepared_stmt.py", line 176, in fetch
    data = await self.__bind_execute(args, 0, timeout)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\prepared_stmt.py", line 267, in __bind_execute
    data, status, _ = await self.__do_execute(
                      ^^^^^^^^^^^^^^^^^^^^^^^^
        lambda protocol: protocol.bind_execute(
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            self._state, args, '', limit, True, timeout))
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\prepared_stmt.py", line 256, in __do_execute
    return await executor(protocol)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "asyncpg\\protocol\\protocol.pyx", line 206, in bind_execute
asyncpg.exceptions.UniqueViolationError: llave duplicada viola restricción de unicidad «ix_payment_terms_code»
DETAIL:  Ya existe la llave (code)=(EOM302).

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1963, in _exec_single_context
    self.dialect.do_execute(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        cursor, str_statement, effective_parameters, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 943, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 580, in execute
    self._adapt_connection.await_(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._prepare_and_execute(operation, parameters)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 132, in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 196, in greenlet_spawn
    value = await result
            ^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 558, in _prepare_and_execute
    self._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 508, in _handle_exception
    self._adapt_connection._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 792, in _handle_exception
    raise translated_error from error
sqlalchemy.dialects.postgresql.asyncpg.AsyncAdapt_asyncpg_dbapi.IntegrityError: <class 'asyncpg.exceptions.UniqueViolationError'>: llave duplicada viola restricción de unicidad «ix_payment_terms_code»
DETAIL:  Ya existe la llave (code)=(EOM302).

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 25, in create_payment_term
    await db.flush()
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\ext\asyncio\session.py", line 801, in flush
    await greenlet_spawn(self.sync_session.flush, objects=objects)
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 203, in greenlet_spawn
    result = context.switch(value)
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 4345, in flush
    self._flush(objects)
    ~~~~~~~~~~~^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 4480, in _flush
    with util.safe_reraise():
         ~~~~~~~~~~~~~~~~~^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 224, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 4441, in _flush
    flush_context.execute()
    ~~~~~~~~~~~~~~~~~~~~~^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
    ~~~~~~~~~~~^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.mapper,
        ^^^^^^^^^^^^
        uow.states_for_mapper_hierarchy(self.mapper, False, False),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        uow,
        ^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\persistence.py", line 93, in save_obj
    _emit_insert_statements(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        base_mapper,
        ^^^^^^^^^^^^
    ...<3 lines>...
        insert,
        ^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\persistence.py", line 1233, in _emit_insert_statements
    result = connection.execute(
        statement,
        params,
        execution_options=execution_options,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1415, in execute
    return meth(
        self,
        distilled_parameters,
        execution_options or NO_OPTIONS,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self, distilled_params, execution_options
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1637, in _execute_clauseelement
    ret = self._execute_context(
        dialect,
    ...<8 lines>...
        cache_hit=cache_hit,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1842, in _execute_context
    return self._exec_single_context(
           ~~~~~~~~~~~~~~~~~~~~~~~~~^
        dialect, context, statement, parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1982, in _exec_single_context
    self._handle_dbapi_exception(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        e, str_statement, effective_parameters, cursor, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 2351, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1963, in _exec_single_context
    self.dialect.do_execute(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        cursor, str_statement, effective_parameters, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 943, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 580, in execute
    self._adapt_connection.await_(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._prepare_and_execute(operation, parameters)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 132, in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 196, in greenlet_spawn
    value = await result
            ^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 558, in _prepare_and_execute
    self._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 508, in _handle_exception
    self._adapt_connection._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 792, in _handle_exception
    raise translated_error from error
sqlalchemy.exc.IntegrityError: (sqlalchemy.dialects.postgresql.asyncpg.IntegrityError) <class 'asyncpg.exceptions.UniqueViolationError'>: llave duplicada viola restricción de unicidad «ix_payment_terms_code»
DETAIL:  Ya existe la llave (code)=(EOM302).
[SQL: INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at]
[parameters: (UUID('7fc33026-4740-40cc-9452-ebd1b07c12f1'), 'EOM302', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'))]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-09-02 11:40:23 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 11:40:23 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:40:23 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 11:40:23 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:40:23 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 11:40:23 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:40:23 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:40:23 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:40:23 | INFO | sqlalchemy.engine.Engine | [generated in 0.00108s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:40:23 | INFO | sqlalchemy.engine.Engine | INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at
2025-09-02 11:40:23 | INFO | sqlalchemy.engine.Engine | [generated in 0.00465s] (UUID('75797ae4-f993-48cb-91fb-9344f8e676bd'), 'EOM302', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'))
2025-09-02 11:40:23 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 11:40:24 | ERROR | app.crud.payment_term | Error de integridad al crear término de pago: (sqlalchemy.dialects.postgresql.asyncpg.IntegrityError) <class 'asyncpg.exceptions.UniqueViolationError'>: llave duplicada viola restricción de unicidad «ix_payment_terms_code»
DETAIL:  Ya existe la llave (code)=(EOM302).
[SQL: INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at]
[parameters: (UUID('75797ae4-f993-48cb-91fb-9344f8e676bd'), 'EOM302', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'))]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 545, in _prepare_and_execute
    self._rows = deque(await prepared_stmt.fetch(*parameters))
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\prepared_stmt.py", line 176, in fetch
    data = await self.__bind_execute(args, 0, timeout)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\prepared_stmt.py", line 267, in __bind_execute
    data, status, _ = await self.__do_execute(
                      ^^^^^^^^^^^^^^^^^^^^^^^^
        lambda protocol: protocol.bind_execute(
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            self._state, args, '', limit, True, timeout))
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\prepared_stmt.py", line 256, in __do_execute
    return await executor(protocol)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "asyncpg\\protocol\\protocol.pyx", line 206, in bind_execute
asyncpg.exceptions.UniqueViolationError: llave duplicada viola restricción de unicidad «ix_payment_terms_code»
DETAIL:  Ya existe la llave (code)=(EOM302).

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1963, in _exec_single_context
    self.dialect.do_execute(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        cursor, str_statement, effective_parameters, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 943, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 580, in execute
    self._adapt_connection.await_(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._prepare_and_execute(operation, parameters)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 132, in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 196, in greenlet_spawn
    value = await result
            ^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 558, in _prepare_and_execute
    self._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 508, in _handle_exception
    self._adapt_connection._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 792, in _handle_exception
    raise translated_error from error
sqlalchemy.dialects.postgresql.asyncpg.AsyncAdapt_asyncpg_dbapi.IntegrityError: <class 'asyncpg.exceptions.UniqueViolationError'>: llave duplicada viola restricción de unicidad «ix_payment_terms_code»
DETAIL:  Ya existe la llave (code)=(EOM302).

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 25, in create_payment_term
    await db.flush()
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\ext\asyncio\session.py", line 801, in flush
    await greenlet_spawn(self.sync_session.flush, objects=objects)
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 203, in greenlet_spawn
    result = context.switch(value)
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 4345, in flush
    self._flush(objects)
    ~~~~~~~~~~~^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 4480, in _flush
    with util.safe_reraise():
         ~~~~~~~~~~~~~~~~~^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 224, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 4441, in _flush
    flush_context.execute()
    ~~~~~~~~~~~~~~~~~~~~~^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
    ~~~~~~~~~~~^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.mapper,
        ^^^^^^^^^^^^
        uow.states_for_mapper_hierarchy(self.mapper, False, False),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        uow,
        ^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\persistence.py", line 93, in save_obj
    _emit_insert_statements(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        base_mapper,
        ^^^^^^^^^^^^
    ...<3 lines>...
        insert,
        ^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\persistence.py", line 1233, in _emit_insert_statements
    result = connection.execute(
        statement,
        params,
        execution_options=execution_options,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1415, in execute
    return meth(
        self,
        distilled_parameters,
        execution_options or NO_OPTIONS,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self, distilled_params, execution_options
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1637, in _execute_clauseelement
    ret = self._execute_context(
        dialect,
    ...<8 lines>...
        cache_hit=cache_hit,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1842, in _execute_context
    return self._exec_single_context(
           ~~~~~~~~~~~~~~~~~~~~~~~~~^
        dialect, context, statement, parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1982, in _exec_single_context
    self._handle_dbapi_exception(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        e, str_statement, effective_parameters, cursor, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 2351, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1963, in _exec_single_context
    self.dialect.do_execute(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        cursor, str_statement, effective_parameters, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 943, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 580, in execute
    self._adapt_connection.await_(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._prepare_and_execute(operation, parameters)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 132, in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 196, in greenlet_spawn
    value = await result
            ^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 558, in _prepare_and_execute
    self._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 508, in _handle_exception
    self._adapt_connection._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 792, in _handle_exception
    raise translated_error from error
sqlalchemy.exc.IntegrityError: (sqlalchemy.dialects.postgresql.asyncpg.IntegrityError) <class 'asyncpg.exceptions.UniqueViolationError'>: llave duplicada viola restricción de unicidad «ix_payment_terms_code»
DETAIL:  Ya existe la llave (code)=(EOM302).
[SQL: INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at]
[parameters: (UUID('75797ae4-f993-48cb-91fb-9344f8e676bd'), 'EOM302', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'))]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-09-02 11:44:54 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 11:44:54 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:44:54 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 11:44:54 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:44:54 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 11:44:54 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:44:54 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:44:54 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:44:54 | INFO | sqlalchemy.engine.Engine | [generated in 0.00104s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:44:54 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.code = $1::VARCHAR
2025-09-02 11:44:54 | INFO | sqlalchemy.engine.Engine | [generated in 0.00283s] ('EOM302',)
2025-09-02 11:44:54 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 11:48:20 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:48:20 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:48:20 | INFO | sqlalchemy.engine.Engine | [cached since 206.2s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:48:20 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.code = $1::VARCHAR
2025-09-02 11:48:20 | INFO | sqlalchemy.engine.Engine | [cached since 206.2s ago] ('EOM303',)
2025-09-02 11:48:20 | INFO | sqlalchemy.engine.Engine | INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at
2025-09-02 11:48:20 | INFO | sqlalchemy.engine.Engine | [generated in 0.00210s] (UUID('e70d81e1-11d2-44c3-8a81-f38384369fff'), 'EOM303', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, None)
2025-09-02 11:48:20 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 11:48:20 | ERROR | app.crud.payment_term | Error al crear término de pago: (sqlalchemy.dialects.postgresql.asyncpg.IntegrityError) <class 'asyncpg.exceptions.NotNullViolationError'>: el valor nulo en la columna «user_id» de la relación «payment_terms» viola la restricción de no nulo
DETAIL:  La fila que falla contiene (e70d81e1-11d2-44c3-8a81-f38384369fff, EOM303, Fin de mes + 302, <script>alert('XSS')</script>, t, null, 2025-09-02 11:48:20.270983-05, 2025-09-02 11:48:20.270983-05, 30, 0, 0, Factura).
[SQL: INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at]
[parameters: (UUID('e70d81e1-11d2-44c3-8a81-f38384369fff'), 'EOM303', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-09-02 11:48:20 | ERROR | app.routers.payment_term | Error de integridad al crear término de pago: (sqlalchemy.dialects.postgresql.asyncpg.IntegrityError) <class 'asyncpg.exceptions.NotNullViolationError'>: el valor nulo en la columna «user_id» de la relación «payment_terms» viola la restricción de no nulo
DETAIL:  La fila que falla contiene (e70d81e1-11d2-44c3-8a81-f38384369fff, EOM303, Fin de mes + 302, <script>alert('XSS')</script>, t, null, 2025-09-02 11:48:20.270983-05, 2025-09-02 11:48:20.270983-05, 30, 0, 0, Factura).
[SQL: INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at]
[parameters: (UUID('e70d81e1-11d2-44c3-8a81-f38384369fff'), 'EOM303', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 545, in _prepare_and_execute
    self._rows = deque(await prepared_stmt.fetch(*parameters))
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\prepared_stmt.py", line 176, in fetch
    data = await self.__bind_execute(args, 0, timeout)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\prepared_stmt.py", line 267, in __bind_execute
    data, status, _ = await self.__do_execute(
                      ^^^^^^^^^^^^^^^^^^^^^^^^
        lambda protocol: protocol.bind_execute(
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            self._state, args, '', limit, True, timeout))
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\prepared_stmt.py", line 256, in __do_execute
    return await executor(protocol)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "asyncpg\\protocol\\protocol.pyx", line 206, in bind_execute
asyncpg.exceptions.NotNullViolationError: el valor nulo en la columna «user_id» de la relación «payment_terms» viola la restricción de no nulo
DETAIL:  La fila que falla contiene (e70d81e1-11d2-44c3-8a81-f38384369fff, EOM303, Fin de mes + 302, <script>alert('XSS')</script>, t, null, 2025-09-02 11:48:20.270983-05, 2025-09-02 11:48:20.270983-05, 30, 0, 0, Factura).

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1963, in _exec_single_context
    self.dialect.do_execute(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        cursor, str_statement, effective_parameters, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 943, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 580, in execute
    self._adapt_connection.await_(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._prepare_and_execute(operation, parameters)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 132, in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 196, in greenlet_spawn
    value = await result
            ^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 558, in _prepare_and_execute
    self._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 508, in _handle_exception
    self._adapt_connection._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 792, in _handle_exception
    raise translated_error from error
sqlalchemy.dialects.postgresql.asyncpg.AsyncAdapt_asyncpg_dbapi.IntegrityError: <class 'asyncpg.exceptions.NotNullViolationError'>: el valor nulo en la columna «user_id» de la relación «payment_terms» viola la restricción de no nulo
DETAIL:  La fila que falla contiene (e70d81e1-11d2-44c3-8a81-f38384369fff, EOM303, Fin de mes + 302, <script>alert('XSS')</script>, t, null, 2025-09-02 11:48:20.270983-05, 2025-09-02 11:48:20.270983-05, 30, 0, 0, Factura).

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\routers\payment_term.py", line 42, in create_payment_term_endpoint
    new_payment_term, log = await create_payment_term(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
        db, payment_term_in.model_dump(), current_user.id
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 58, in create_payment_term
    raise e
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 33, in create_payment_term
    await db.flush()
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\ext\asyncio\session.py", line 801, in flush
    await greenlet_spawn(self.sync_session.flush, objects=objects)
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 203, in greenlet_spawn
    result = context.switch(value)
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 4345, in flush
    self._flush(objects)
    ~~~~~~~~~~~^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 4480, in _flush
    with util.safe_reraise():
         ~~~~~~~~~~~~~~~~~^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 224, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 4441, in _flush
    flush_context.execute()
    ~~~~~~~~~~~~~~~~~~~~~^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
    ~~~~~~~~~~~^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.mapper,
        ^^^^^^^^^^^^
        uow.states_for_mapper_hierarchy(self.mapper, False, False),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        uow,
        ^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\persistence.py", line 93, in save_obj
    _emit_insert_statements(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        base_mapper,
        ^^^^^^^^^^^^
    ...<3 lines>...
        insert,
        ^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\persistence.py", line 1233, in _emit_insert_statements
    result = connection.execute(
        statement,
        params,
        execution_options=execution_options,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1415, in execute
    return meth(
        self,
        distilled_parameters,
        execution_options or NO_OPTIONS,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self, distilled_params, execution_options
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1637, in _execute_clauseelement
    ret = self._execute_context(
        dialect,
    ...<8 lines>...
        cache_hit=cache_hit,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1842, in _execute_context
    return self._exec_single_context(
           ~~~~~~~~~~~~~~~~~~~~~~~~~^
        dialect, context, statement, parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1982, in _exec_single_context
    self._handle_dbapi_exception(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        e, str_statement, effective_parameters, cursor, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 2351, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1963, in _exec_single_context
    self.dialect.do_execute(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        cursor, str_statement, effective_parameters, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 943, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 580, in execute
    self._adapt_connection.await_(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._prepare_and_execute(operation, parameters)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 132, in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 196, in greenlet_spawn
    value = await result
            ^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 558, in _prepare_and_execute
    self._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 508, in _handle_exception
    self._adapt_connection._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 792, in _handle_exception
    raise translated_error from error
sqlalchemy.exc.IntegrityError: (sqlalchemy.dialects.postgresql.asyncpg.IntegrityError) <class 'asyncpg.exceptions.NotNullViolationError'>: el valor nulo en la columna «user_id» de la relación «payment_terms» viola la restricción de no nulo
DETAIL:  La fila que falla contiene (e70d81e1-11d2-44c3-8a81-f38384369fff, EOM303, Fin de mes + 302, <script>alert('XSS')</script>, t, null, 2025-09-02 11:48:20.270983-05, 2025-09-02 11:48:20.270983-05, 30, 0, 0, Factura).
[SQL: INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at]
[parameters: (UUID('e70d81e1-11d2-44c3-8a81-f38384369fff'), 'EOM303', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-09-02 11:53:24 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:53:24 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:53:24 | INFO | sqlalchemy.engine.Engine | [cached since 510.4s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:53:24 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.code = $1::VARCHAR
2025-09-02 11:53:24 | INFO | sqlalchemy.engine.Engine | [cached since 510.3s ago] ('EOM303',)
2025-09-02 11:53:24 | INFO | sqlalchemy.engine.Engine | INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at
2025-09-02 11:53:24 | INFO | sqlalchemy.engine.Engine | [cached since 304.2s ago] (UUID('4c254ad1-e6b9-421a-8632-5eaba1f31814'), 'EOM303', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, None)
2025-09-02 11:53:24 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 11:53:24 | ERROR | app.crud.payment_term | Error al crear término de pago: (sqlalchemy.dialects.postgresql.asyncpg.IntegrityError) <class 'asyncpg.exceptions.NotNullViolationError'>: el valor nulo en la columna «user_id» de la relación «payment_terms» viola la restricción de no nulo
DETAIL:  La fila que falla contiene (4c254ad1-e6b9-421a-8632-5eaba1f31814, EOM303, Fin de mes + 302, <script>alert('XSS')</script>, t, null, 2025-09-02 11:53:24.453986-05, 2025-09-02 11:53:24.453986-05, 30, 0, 0, Factura).
[SQL: INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at]
[parameters: (UUID('4c254ad1-e6b9-421a-8632-5eaba1f31814'), 'EOM303', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-09-02 11:53:24 | ERROR | app.routers.payment_term | Error de integridad al crear término de pago: (sqlalchemy.dialects.postgresql.asyncpg.IntegrityError) <class 'asyncpg.exceptions.NotNullViolationError'>: el valor nulo en la columna «user_id» de la relación «payment_terms» viola la restricción de no nulo
DETAIL:  La fila que falla contiene (4c254ad1-e6b9-421a-8632-5eaba1f31814, EOM303, Fin de mes + 302, <script>alert('XSS')</script>, t, null, 2025-09-02 11:53:24.453986-05, 2025-09-02 11:53:24.453986-05, 30, 0, 0, Factura).
[SQL: INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at]
[parameters: (UUID('4c254ad1-e6b9-421a-8632-5eaba1f31814'), 'EOM303', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 545, in _prepare_and_execute
    self._rows = deque(await prepared_stmt.fetch(*parameters))
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\prepared_stmt.py", line 176, in fetch
    data = await self.__bind_execute(args, 0, timeout)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\prepared_stmt.py", line 267, in __bind_execute
    data, status, _ = await self.__do_execute(
                      ^^^^^^^^^^^^^^^^^^^^^^^^
        lambda protocol: protocol.bind_execute(
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            self._state, args, '', limit, True, timeout))
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\prepared_stmt.py", line 256, in __do_execute
    return await executor(protocol)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "asyncpg\\protocol\\protocol.pyx", line 206, in bind_execute
asyncpg.exceptions.NotNullViolationError: el valor nulo en la columna «user_id» de la relación «payment_terms» viola la restricción de no nulo
DETAIL:  La fila que falla contiene (4c254ad1-e6b9-421a-8632-5eaba1f31814, EOM303, Fin de mes + 302, <script>alert('XSS')</script>, t, null, 2025-09-02 11:53:24.453986-05, 2025-09-02 11:53:24.453986-05, 30, 0, 0, Factura).

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1963, in _exec_single_context
    self.dialect.do_execute(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        cursor, str_statement, effective_parameters, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 943, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 580, in execute
    self._adapt_connection.await_(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._prepare_and_execute(operation, parameters)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 132, in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 196, in greenlet_spawn
    value = await result
            ^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 558, in _prepare_and_execute
    self._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 508, in _handle_exception
    self._adapt_connection._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 792, in _handle_exception
    raise translated_error from error
sqlalchemy.dialects.postgresql.asyncpg.AsyncAdapt_asyncpg_dbapi.IntegrityError: <class 'asyncpg.exceptions.NotNullViolationError'>: el valor nulo en la columna «user_id» de la relación «payment_terms» viola la restricción de no nulo
DETAIL:  La fila que falla contiene (4c254ad1-e6b9-421a-8632-5eaba1f31814, EOM303, Fin de mes + 302, <script>alert('XSS')</script>, t, null, 2025-09-02 11:53:24.453986-05, 2025-09-02 11:53:24.453986-05, 30, 0, 0, Factura).

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\routers\payment_term.py", line 42, in create_payment_term_endpoint
    new_payment_term, log = await create_payment_term(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
        db, payment_term_in.model_dump(), current_user.id
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 58, in create_payment_term
    except Exception as e:
        ^^^^^^^
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 33, in create_payment_term
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\ext\asyncio\session.py", line 801, in flush
    await greenlet_spawn(self.sync_session.flush, objects=objects)
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 203, in greenlet_spawn
    result = context.switch(value)
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 4345, in flush
    self._flush(objects)
    ~~~~~~~~~~~^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 4480, in _flush
    with util.safe_reraise():
         ~~~~~~~~~~~~~~~~~^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 224, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 4441, in _flush
    flush_context.execute()
    ~~~~~~~~~~~~~~~~~~~~~^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
    ~~~~~~~~~~~^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.mapper,
        ^^^^^^^^^^^^
        uow.states_for_mapper_hierarchy(self.mapper, False, False),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        uow,
        ^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\persistence.py", line 93, in save_obj
    _emit_insert_statements(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        base_mapper,
        ^^^^^^^^^^^^
    ...<3 lines>...
        insert,
        ^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\persistence.py", line 1233, in _emit_insert_statements
    result = connection.execute(
        statement,
        params,
        execution_options=execution_options,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1415, in execute
    return meth(
        self,
        distilled_parameters,
        execution_options or NO_OPTIONS,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self, distilled_params, execution_options
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1637, in _execute_clauseelement
    ret = self._execute_context(
        dialect,
    ...<8 lines>...
        cache_hit=cache_hit,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1842, in _execute_context
    return self._exec_single_context(
           ~~~~~~~~~~~~~~~~~~~~~~~~~^
        dialect, context, statement, parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1982, in _exec_single_context
    self._handle_dbapi_exception(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        e, str_statement, effective_parameters, cursor, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 2351, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1963, in _exec_single_context
    self.dialect.do_execute(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        cursor, str_statement, effective_parameters, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 943, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 580, in execute
    self._adapt_connection.await_(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._prepare_and_execute(operation, parameters)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 132, in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 196, in greenlet_spawn
    value = await result
            ^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 558, in _prepare_and_execute
    self._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 508, in _handle_exception
    self._adapt_connection._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 792, in _handle_exception
    raise translated_error from error
sqlalchemy.exc.IntegrityError: (sqlalchemy.dialects.postgresql.asyncpg.IntegrityError) <class 'asyncpg.exceptions.NotNullViolationError'>: el valor nulo en la columna «user_id» de la relación «payment_terms» viola la restricción de no nulo
DETAIL:  La fila que falla contiene (4c254ad1-e6b9-421a-8632-5eaba1f31814, EOM303, Fin de mes + 302, <script>alert('XSS')</script>, t, null, 2025-09-02 11:53:24.453986-05, 2025-09-02 11:53:24.453986-05, 30, 0, 0, Factura).
[SQL: INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at]
[parameters: (UUID('4c254ad1-e6b9-421a-8632-5eaba1f31814'), 'EOM303', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-09-02 11:53:46 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 11:53:46 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:53:46 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 11:53:46 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:53:46 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 11:53:46 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 11:53:46 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:53:46 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:53:46 | INFO | sqlalchemy.engine.Engine | [generated in 0.00426s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:53:46 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.code = $1::VARCHAR
2025-09-02 11:53:46 | INFO | sqlalchemy.engine.Engine | [generated in 0.00330s] ('EOM303',)
2025-09-02 11:53:46 | INFO | sqlalchemy.engine.Engine | INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at
2025-09-02 11:53:46 | INFO | sqlalchemy.engine.Engine | [generated in 0.00376s] (UUID('d623970c-1140-450c-ba3b-ad402b0af082'), 'EOM303', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, None)
2025-09-02 11:53:46 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 11:53:46 | ERROR | app.crud.payment_term | Error al crear término de pago: (sqlalchemy.dialects.postgresql.asyncpg.IntegrityError) <class 'asyncpg.exceptions.NotNullViolationError'>: el valor nulo en la columna «user_id» de la relación «payment_terms» viola la restricción de no nulo
DETAIL:  La fila que falla contiene (d623970c-1140-450c-ba3b-ad402b0af082, EOM303, Fin de mes + 302, <script>alert('XSS')</script>, t, null, 2025-09-02 11:53:46.267592-05, 2025-09-02 11:53:46.267592-05, 30, 0, 0, Factura).
[SQL: INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at]
[parameters: (UUID('d623970c-1140-450c-ba3b-ad402b0af082'), 'EOM303', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-09-02 11:53:46 | ERROR | app.routers.payment_term | Error de integridad al crear término de pago: (sqlalchemy.dialects.postgresql.asyncpg.IntegrityError) <class 'asyncpg.exceptions.NotNullViolationError'>: el valor nulo en la columna «user_id» de la relación «payment_terms» viola la restricción de no nulo
DETAIL:  La fila que falla contiene (d623970c-1140-450c-ba3b-ad402b0af082, EOM303, Fin de mes + 302, <script>alert('XSS')</script>, t, null, 2025-09-02 11:53:46.267592-05, 2025-09-02 11:53:46.267592-05, 30, 0, 0, Factura).
[SQL: INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at]
[parameters: (UUID('d623970c-1140-450c-ba3b-ad402b0af082'), 'EOM303', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 545, in _prepare_and_execute
    self._rows = deque(await prepared_stmt.fetch(*parameters))
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\prepared_stmt.py", line 176, in fetch
    data = await self.__bind_execute(args, 0, timeout)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\prepared_stmt.py", line 267, in __bind_execute
    data, status, _ = await self.__do_execute(
                      ^^^^^^^^^^^^^^^^^^^^^^^^
        lambda protocol: protocol.bind_execute(
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            self._state, args, '', limit, True, timeout))
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\prepared_stmt.py", line 256, in __do_execute
    return await executor(protocol)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "asyncpg\\protocol\\protocol.pyx", line 206, in bind_execute
asyncpg.exceptions.NotNullViolationError: el valor nulo en la columna «user_id» de la relación «payment_terms» viola la restricción de no nulo
DETAIL:  La fila que falla contiene (d623970c-1140-450c-ba3b-ad402b0af082, EOM303, Fin de mes + 302, <script>alert('XSS')</script>, t, null, 2025-09-02 11:53:46.267592-05, 2025-09-02 11:53:46.267592-05, 30, 0, 0, Factura).

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1963, in _exec_single_context
    self.dialect.do_execute(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        cursor, str_statement, effective_parameters, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 943, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 580, in execute
    self._adapt_connection.await_(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._prepare_and_execute(operation, parameters)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 132, in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 196, in greenlet_spawn
    value = await result
            ^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 558, in _prepare_and_execute
    self._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 508, in _handle_exception
    self._adapt_connection._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 792, in _handle_exception
    raise translated_error from error
sqlalchemy.dialects.postgresql.asyncpg.AsyncAdapt_asyncpg_dbapi.IntegrityError: <class 'asyncpg.exceptions.NotNullViolationError'>: el valor nulo en la columna «user_id» de la relación «payment_terms» viola la restricción de no nulo
DETAIL:  La fila que falla contiene (d623970c-1140-450c-ba3b-ad402b0af082, EOM303, Fin de mes + 302, <script>alert('XSS')</script>, t, null, 2025-09-02 11:53:46.267592-05, 2025-09-02 11:53:46.267592-05, 30, 0, 0, Factura).

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\routers\payment_term.py", line 42, in create_payment_term_endpoint
    new_payment_term, log = await create_payment_term(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
        db, payment_term_in.model_dump(), current_user.id
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 61, in create_payment_term
    raise e
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 36, in create_payment_term
    await db.flush()
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\ext\asyncio\session.py", line 801, in flush
    await greenlet_spawn(self.sync_session.flush, objects=objects)
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 203, in greenlet_spawn
    result = context.switch(value)
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 4345, in flush
    self._flush(objects)
    ~~~~~~~~~~~^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 4480, in _flush
    with util.safe_reraise():
         ~~~~~~~~~~~~~~~~~^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 224, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 4441, in _flush
    flush_context.execute()
    ~~~~~~~~~~~~~~~~~~~~~^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
    ~~~~~~~~~~~^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.mapper,
        ^^^^^^^^^^^^
        uow.states_for_mapper_hierarchy(self.mapper, False, False),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        uow,
        ^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\persistence.py", line 93, in save_obj
    _emit_insert_statements(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        base_mapper,
        ^^^^^^^^^^^^
    ...<3 lines>...
        insert,
        ^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\persistence.py", line 1233, in _emit_insert_statements
    result = connection.execute(
        statement,
        params,
        execution_options=execution_options,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1415, in execute
    return meth(
        self,
        distilled_parameters,
        execution_options or NO_OPTIONS,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self, distilled_params, execution_options
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1637, in _execute_clauseelement
    ret = self._execute_context(
        dialect,
    ...<8 lines>...
        cache_hit=cache_hit,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1842, in _execute_context
    return self._exec_single_context(
           ~~~~~~~~~~~~~~~~~~~~~~~~~^
        dialect, context, statement, parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1982, in _exec_single_context
    self._handle_dbapi_exception(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        e, str_statement, effective_parameters, cursor, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 2351, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1963, in _exec_single_context
    self.dialect.do_execute(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        cursor, str_statement, effective_parameters, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 943, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 580, in execute
    self._adapt_connection.await_(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._prepare_and_execute(operation, parameters)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 132, in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 196, in greenlet_spawn
    value = await result
            ^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 558, in _prepare_and_execute
    self._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 508, in _handle_exception
    self._adapt_connection._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 792, in _handle_exception
    raise translated_error from error
sqlalchemy.exc.IntegrityError: (sqlalchemy.dialects.postgresql.asyncpg.IntegrityError) <class 'asyncpg.exceptions.NotNullViolationError'>: el valor nulo en la columna «user_id» de la relación «payment_terms» viola la restricción de no nulo
DETAIL:  La fila que falla contiene (d623970c-1140-450c-ba3b-ad402b0af082, EOM303, Fin de mes + 302, <script>alert('XSS')</script>, t, null, 2025-09-02 11:53:46.267592-05, 2025-09-02 11:53:46.267592-05, 30, 0, 0, Factura).
[SQL: INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at]
[parameters: (UUID('d623970c-1140-450c-ba3b-ad402b0af082'), 'EOM303', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-09-02 11:56:24 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 11:56:24 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 11:56:24 | INFO | sqlalchemy.engine.Engine | [cached since 157.8s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 11:56:24 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.code = $1::VARCHAR
2025-09-02 11:56:24 | INFO | sqlalchemy.engine.Engine | [cached since 157.8s ago] ('EOM303',)
2025-09-02 11:56:24 | INFO | sqlalchemy.engine.Engine | INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at
2025-09-02 11:56:24 | INFO | sqlalchemy.engine.Engine | [cached since 157.8s ago] (UUID('96107f93-a2aa-46c8-9efd-46b55b19a3a8'), 'EOM303', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, None)
2025-09-02 11:56:24 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 11:56:24 | ERROR | app.crud.payment_term | Error al crear término de pago: (sqlalchemy.dialects.postgresql.asyncpg.IntegrityError) <class 'asyncpg.exceptions.NotNullViolationError'>: el valor nulo en la columna «user_id» de la relación «payment_terms» viola la restricción de no nulo
DETAIL:  La fila que falla contiene (96107f93-a2aa-46c8-9efd-46b55b19a3a8, EOM303, Fin de mes + 302, <script>alert('XSS')</script>, t, null, 2025-09-02 11:56:24.052531-05, 2025-09-02 11:56:24.052531-05, 30, 0, 0, Factura).
[SQL: INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at]
[parameters: (UUID('96107f93-a2aa-46c8-9efd-46b55b19a3a8'), 'EOM303', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-09-02 11:56:24 | ERROR | app.routers.payment_term | Error de integridad al crear término de pago: (sqlalchemy.dialects.postgresql.asyncpg.IntegrityError) <class 'asyncpg.exceptions.NotNullViolationError'>: el valor nulo en la columna «user_id» de la relación «payment_terms» viola la restricción de no nulo
DETAIL:  La fila que falla contiene (96107f93-a2aa-46c8-9efd-46b55b19a3a8, EOM303, Fin de mes + 302, <script>alert('XSS')</script>, t, null, 2025-09-02 11:56:24.052531-05, 2025-09-02 11:56:24.052531-05, 30, 0, 0, Factura).
[SQL: INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at]
[parameters: (UUID('96107f93-a2aa-46c8-9efd-46b55b19a3a8'), 'EOM303', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 545, in _prepare_and_execute
    self._rows = deque(await prepared_stmt.fetch(*parameters))
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\prepared_stmt.py", line 176, in fetch
    data = await self.__bind_execute(args, 0, timeout)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\prepared_stmt.py", line 267, in __bind_execute
    data, status, _ = await self.__do_execute(
                      ^^^^^^^^^^^^^^^^^^^^^^^^
        lambda protocol: protocol.bind_execute(
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            self._state, args, '', limit, True, timeout))
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\asyncpg\prepared_stmt.py", line 256, in __do_execute
    return await executor(protocol)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "asyncpg\\protocol\\protocol.pyx", line 206, in bind_execute
asyncpg.exceptions.NotNullViolationError: el valor nulo en la columna «user_id» de la relación «payment_terms» viola la restricción de no nulo
DETAIL:  La fila que falla contiene (96107f93-a2aa-46c8-9efd-46b55b19a3a8, EOM303, Fin de mes + 302, <script>alert('XSS')</script>, t, null, 2025-09-02 11:56:24.052531-05, 2025-09-02 11:56:24.052531-05, 30, 0, 0, Factura).

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1963, in _exec_single_context
    self.dialect.do_execute(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        cursor, str_statement, effective_parameters, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 943, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 580, in execute
    self._adapt_connection.await_(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._prepare_and_execute(operation, parameters)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 132, in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 196, in greenlet_spawn
    value = await result
            ^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 558, in _prepare_and_execute
    self._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 508, in _handle_exception
    self._adapt_connection._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 792, in _handle_exception
    raise translated_error from error
sqlalchemy.dialects.postgresql.asyncpg.AsyncAdapt_asyncpg_dbapi.IntegrityError: <class 'asyncpg.exceptions.NotNullViolationError'>: el valor nulo en la columna «user_id» de la relación «payment_terms» viola la restricción de no nulo
DETAIL:  La fila que falla contiene (96107f93-a2aa-46c8-9efd-46b55b19a3a8, EOM303, Fin de mes + 302, <script>alert('XSS')</script>, t, null, 2025-09-02 11:56:24.052531-05, 2025-09-02 11:56:24.052531-05, 30, 0, 0, Factura).

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\routers\payment_term.py", line 42, in create_payment_term_endpoint
    new_payment_term, log = await create_payment_term(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
        db, payment_term_in.model_dump(), current_user.id
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 61, in create_payment_term
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 36, in create_payment_term
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\ext\asyncio\session.py", line 801, in flush
    await greenlet_spawn(self.sync_session.flush, objects=objects)
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 203, in greenlet_spawn
    result = context.switch(value)
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 4345, in flush
    self._flush(objects)
    ~~~~~~~~~~~^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 4480, in _flush
    with util.safe_reraise():
         ~~~~~~~~~~~~~~~~~^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 224, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 4441, in _flush
    flush_context.execute()
    ~~~~~~~~~~~~~~~~~~~~~^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
    ~~~~~~~~~~~^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.mapper,
        ^^^^^^^^^^^^
        uow.states_for_mapper_hierarchy(self.mapper, False, False),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        uow,
        ^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\persistence.py", line 93, in save_obj
    _emit_insert_statements(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        base_mapper,
        ^^^^^^^^^^^^
    ...<3 lines>...
        insert,
        ^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\persistence.py", line 1233, in _emit_insert_statements
    result = connection.execute(
        statement,
        params,
        execution_options=execution_options,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1415, in execute
    return meth(
        self,
        distilled_parameters,
        execution_options or NO_OPTIONS,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self, distilled_params, execution_options
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1637, in _execute_clauseelement
    ret = self._execute_context(
        dialect,
    ...<8 lines>...
        cache_hit=cache_hit,
    )
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1842, in _execute_context
    return self._exec_single_context(
           ~~~~~~~~~~~~~~~~~~~~~~~~~^
        dialect, context, statement, parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1982, in _exec_single_context
    self._handle_dbapi_exception(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        e, str_statement, effective_parameters, cursor, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 2351, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1963, in _exec_single_context
    self.dialect.do_execute(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        cursor, str_statement, effective_parameters, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 943, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 580, in execute
    self._adapt_connection.await_(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._prepare_and_execute(operation, parameters)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 132, in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 196, in greenlet_spawn
    value = await result
            ^^^^^^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 558, in _prepare_and_execute
    self._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 508, in _handle_exception
    self._adapt_connection._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 792, in _handle_exception
    raise translated_error from error
sqlalchemy.exc.IntegrityError: (sqlalchemy.dialects.postgresql.asyncpg.IntegrityError) <class 'asyncpg.exceptions.NotNullViolationError'>: el valor nulo en la columna «user_id» de la relación «payment_terms» viola la restricción de no nulo
DETAIL:  La fila que falla contiene (96107f93-a2aa-46c8-9efd-46b55b19a3a8, EOM303, Fin de mes + 302, <script>alert('XSS')</script>, t, null, 2025-09-02 11:56:24.052531-05, 2025-09-02 11:56:24.052531-05, 30, 0, 0, Factura).
[SQL: INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at]
[parameters: (UUID('96107f93-a2aa-46c8-9efd-46b55b19a3a8'), 'EOM303', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-09-02 12:00:11 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 12:00:11 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 12:00:11 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 12:00:11 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 12:00:11 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 12:00:11 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 12:00:11 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 12:00:12 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 12:00:12 | INFO | sqlalchemy.engine.Engine | [generated in 0.00104s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 12:00:12 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.code = $1::VARCHAR
2025-09-02 12:00:12 | INFO | sqlalchemy.engine.Engine | [generated in 0.00239s] ('EOM303',)
2025-09-02 12:00:12 | INFO | sqlalchemy.engine.Engine | INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at
2025-09-02 12:00:12 | INFO | sqlalchemy.engine.Engine | [generated in 0.00100s] (UUID('b5f3c763-07b6-4b11-8440-0858d2b57092'), 'EOM303', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'))
2025-09-02 12:00:12 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 12:00:12 | INFO | sqlalchemy.engine.Engine | [generated in 0.00077s] ('audit_level',)
2025-09-02 12:00:12 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 12:00:12 | ERROR | app.crud.payment_term | Error al crear término de pago: 'int' object has no attribute 'value'
2025-09-02 12:00:12 | ERROR | app.routers.payment_term | Error interno al crear término de pago
Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\routers\payment_term.py", line 42, in create_payment_term_endpoint
    new_payment_term, log = await create_payment_term(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
        db, payment_term_in.model_dump(), current_user.id
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 60, in create_payment_term
    raise e
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 39, in create_payment_term
    if audit_level and audit_level.value == "detailed":
                       ^^^^^^^^^^^^^^^^^
AttributeError: 'int' object has no attribute 'value'
2025-09-02 12:02:24 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 12:02:24 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 12:02:24 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 12:02:24 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 12:02:24 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 12:02:24 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 12:02:24 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 12:02:24 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 12:02:24 | INFO | sqlalchemy.engine.Engine | [generated in 0.00107s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 12:02:24 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.code = $1::VARCHAR
2025-09-02 12:02:24 | INFO | sqlalchemy.engine.Engine | [generated in 0.00459s] ('EOM303',)
2025-09-02 12:02:24 | INFO | sqlalchemy.engine.Engine | INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at
2025-09-02 12:02:24 | INFO | sqlalchemy.engine.Engine | [generated in 0.00104s] (UUID('d815fc77-a080-4826-b7fb-71f98c861033'), 'EOM303', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'))
2025-09-02 12:02:24 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 12:02:24 | INFO | sqlalchemy.engine.Engine | [generated in 0.00295s] ('audit_level',)
2025-09-02 12:02:24 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 12:02:24 | ERROR | app.crud.payment_term | Error al crear término de pago: 'int' object has no attribute 'value'
2025-09-02 12:02:24 | ERROR | app.routers.payment_term | Error interno al crear término de pago
Traceback (most recent call last):
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\routers\payment_term.py", line 42, in create_payment_term_endpoint
    new_payment_term, log = await create_payment_term(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
        db, payment_term_in.model_dump(), current_user.id
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 60, in create_payment_term
    raise e
  File "E:\Desarrollo\IA\Projects\4_Ventas\backend\app\crud\payment_term.py", line 39, in create_payment_term
    if audit_level and audit_level.value >= 2:
                       ^^^^^^^^^^^^^^^^^
AttributeError: 'int' object has no attribute 'value'
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | [generated in 0.00116s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.code = $1::VARCHAR
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | [generated in 0.00272s] ('EOM303',)
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | [generated in 0.00108s] (UUID('0694179b-211e-4666-aec8-ad8a6eea691b'), 'EOM303', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'))
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | [generated in 0.00190s] ('audit_level',)
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | COMMIT
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.id = $1::UUID
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | [generated in 0.00418s] (UUID('0694179b-211e-4666-aec8-ad8a6eea691b'),)
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | COMMIT
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.id = $1::UUID
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | [cached since 0.01236s ago] (UUID('0694179b-211e-4666-aec8-ad8a6eea691b'),)
2025-09-02 12:02:51 | INFO | app.routers.payment_term | Término de pago creado exitosamente: 0694179b-211e-4666-aec8-ad8a6eea691b - Fin de mes + 302 por usuario a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac
2025-09-02 12:02:51 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 12:03:19 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 12:03:19 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 12:03:19 | INFO | sqlalchemy.engine.Engine | [cached since 28.39s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 12:03:19 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 12:03:29 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 12:03:29 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 12:03:29 | INFO | sqlalchemy.engine.Engine | [cached since 38.32s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 12:03:29 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 12:03:40 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 12:03:40 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 12:03:40 | INFO | sqlalchemy.engine.Engine | [cached since 48.89s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 12:03:40 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.code = $1::VARCHAR
2025-09-02 12:03:40 | INFO | sqlalchemy.engine.Engine | [cached since 48.9s ago] ('EOM304',)
2025-09-02 12:03:40 | INFO | sqlalchemy.engine.Engine | INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at
2025-09-02 12:03:40 | INFO | sqlalchemy.engine.Engine | [cached since 48.91s ago] (UUID('cf0f3757-efa8-4653-b936-72e13ec162ac'), 'EOM304', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'))
2025-09-02 12:03:40 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 12:03:40 | INFO | sqlalchemy.engine.Engine | [cached since 48.91s ago] ('audit_level',)
2025-09-02 12:03:40 | INFO | sqlalchemy.engine.Engine | COMMIT
2025-09-02 12:03:40 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 12:03:40 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.id = $1::UUID
2025-09-02 12:03:40 | INFO | sqlalchemy.engine.Engine | [cached since 48.92s ago] (UUID('cf0f3757-efa8-4653-b936-72e13ec162ac'),)
2025-09-02 12:03:40 | INFO | sqlalchemy.engine.Engine | COMMIT
2025-09-02 12:03:40 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 12:03:40 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.id = $1::UUID
2025-09-02 12:03:40 | INFO | sqlalchemy.engine.Engine | [cached since 48.95s ago] (UUID('cf0f3757-efa8-4653-b936-72e13ec162ac'),)
2025-09-02 12:03:40 | INFO | app.routers.payment_term | Término de pago creado exitosamente: cf0f3757-efa8-4653-b936-72e13ec162ac - Fin de mes + 302 por usuario a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac
2025-09-02 12:03:40 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 12:12:59 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 12:12:59 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 12:12:59 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 12:12:59 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 12:12:59 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 12:12:59 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 12:12:59 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 12:12:59 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 12:12:59 | INFO | sqlalchemy.engine.Engine | [generated in 0.00153s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 12:12:59 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.code = $1::VARCHAR
2025-09-02 12:12:59 | INFO | sqlalchemy.engine.Engine | [generated in 0.00152s] ('EOM304',)
2025-09-02 12:12:59 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 12:13:16 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 12:13:16 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 12:13:16 | INFO | sqlalchemy.engine.Engine | [cached since 17.15s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 12:13:16 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 14:55:14 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 14:55:14 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 14:55:14 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 14:55:14 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 14:55:14 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 14:55:14 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 14:55:14 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 14:55:15 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.email = $1::VARCHAR
2025-09-02 14:55:15 | INFO | sqlalchemy.engine.Engine | [generated in 0.00306s] ('system@example.com',)
2025-09-02 14:55:15 | WARNING | passlib.handlers.bcrypt | (trapped) error reading bcrypt version
Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\passlib\handlers\bcrypt.py", line 620, in _load_backend_mixin
    version = _bcrypt.__about__.__version__
              ^^^^^^^^^^^^^^^^^
AttributeError: module 'bcrypt' has no attribute '__about__'
2025-09-02 14:55:15 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 14:55:24 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 14:55:24 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 14:55:24 | INFO | sqlalchemy.engine.Engine | [generated in 0.00157s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 14:55:24 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.code = $1::VARCHAR
2025-09-02 14:55:24 | INFO | sqlalchemy.engine.Engine | [generated in 0.02030s] ('EN305',)
2025-09-02 14:55:24 | INFO | sqlalchemy.engine.Engine | INSERT INTO payment_terms (id, code, name, description, net_days, discount_percent, discount_days, basis, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::INTEGER, $6::FLOAT, $7::INTEGER, $8::VARCHAR, $9::BOOLEAN, $10::UUID) RETURNING payment_terms.created_at, payment_terms.updated_at
2025-09-02 14:55:24 | INFO | sqlalchemy.engine.Engine | [generated in 0.00277s] (UUID('cb68b6b7-030e-421a-96db-30ef50b2c546'), 'EN305', 'Fin de mes + 302', "<script>alert('XSS')</script>", 30, 0.0, 0, 'Factura', True, UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'))
2025-09-02 14:55:24 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 14:55:24 | INFO | sqlalchemy.engine.Engine | [generated in 0.00101s] ('audit_level',)
2025-09-02 14:55:24 | INFO | sqlalchemy.engine.Engine | COMMIT
2025-09-02 14:55:24 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 14:55:24 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.id = $1::UUID
2025-09-02 14:55:24 | INFO | sqlalchemy.engine.Engine | [generated in 0.00449s] (UUID('cb68b6b7-030e-421a-96db-30ef50b2c546'),)
2025-09-02 14:55:24 | INFO | sqlalchemy.engine.Engine | COMMIT
2025-09-02 14:55:24 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 14:55:24 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.id = $1::UUID
2025-09-02 14:55:24 | INFO | sqlalchemy.engine.Engine | [cached since 0.02004s ago] (UUID('cb68b6b7-030e-421a-96db-30ef50b2c546'),)
2025-09-02 14:55:24 | INFO | app.routers.payment_term | Término de pago creado exitosamente: cb68b6b7-030e-421a-96db-30ef50b2c546 - Fin de mes + 302 por usuario a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac
2025-09-02 14:55:24 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 14:55:29 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 14:55:29 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 14:55:29 | INFO | sqlalchemy.engine.Engine | [cached since 5.103s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 14:55:29 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms 
WHERE payment_terms.code = $1::VARCHAR
2025-09-02 14:55:29 | INFO | sqlalchemy.engine.Engine | [cached since 5.099s ago] ('EN305',)
2025-09-02 14:55:29 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 14:56:01 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 14:56:01 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 14:56:01 | INFO | sqlalchemy.engine.Engine | [cached since 36.49s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 14:56:01 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 14:56:22 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 14:56:22 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 14:56:22 | INFO | sqlalchemy.engine.Engine | [cached since 57.33s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 14:56:22 | INFO | sqlalchemy.engine.Engine | INSERT INTO brands (id, code, name, description, active, user_id) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::BOOLEAN, $6::UUID) RETURNING brands.created_at, brands.updated_at
2025-09-02 14:56:22 | INFO | sqlalchemy.engine.Engine | [generated in 0.00156s] (UUID('46746a6d-e8d1-4f39-aa0a-01d6795bbb41'), 'Hanna4', 'Hanna4', 'Descripción 1', True, UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'))
2025-09-02 14:56:22 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 14:56:22 | INFO | sqlalchemy.engine.Engine | [cached since 57.27s ago] ('audit_level',)
2025-09-02 14:56:22 | INFO | sqlalchemy.engine.Engine | COMMIT
2025-09-02 14:56:22 | INFO | app.routers.brand | Marca creada exitosamente: 46746a6d-e8d1-4f39-aa0a-01d6795bbb41 - Hanna4 por usuario a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac
2025-09-02 15:54:45 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 15:54:45 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 15:54:45 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 15:54:45 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 15:54:45 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 15:54:45 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 15:54:45 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 15:54:45 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.email = $1::VARCHAR
2025-09-02 15:54:45 | INFO | sqlalchemy.engine.Engine | [generated in 0.00419s] ('system@example.com',)
2025-09-02 15:54:45 | WARNING | passlib.handlers.bcrypt | (trapped) error reading bcrypt version
Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\passlib\handlers\bcrypt.py", line 620, in _load_backend_mixin
    version = _bcrypt.__about__.__version__
              ^^^^^^^^^^^^^^^^^
AttributeError: module 'bcrypt' has no attribute '__about__'
2025-09-02 15:54:46 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 15:55:47 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 15:55:47 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.email = $1::VARCHAR
2025-09-02 15:55:47 | INFO | sqlalchemy.engine.Engine | [cached since 61.72s ago] ('system@example.com',)
2025-09-02 15:55:48 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 18:23:07 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 18:23:07 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.email = $1::VARCHAR
2025-09-02 18:23:07 | INFO | sqlalchemy.engine.Engine | [cached since 8902s ago] ('system@example.com',)
2025-09-02 18:23:08 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 20:06:11 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 20:06:11 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.email = $1::VARCHAR
2025-09-02 20:06:11 | INFO | sqlalchemy.engine.Engine | [cached since 1.509e+04s ago] ('system@example.com',)
2025-09-02 20:06:11 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 20:08:41 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 20:08:41 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 20:08:41 | INFO | sqlalchemy.engine.Engine | [generated in 0.00132s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 20:08:41 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM (SELECT payment_terms.id AS id, payment_terms.code AS code, payment_terms.name AS name, payment_terms.description AS description, payment_terms.net_days AS net_days, payment_terms.discount_percent AS discount_percent, payment_terms.discount_days AS discount_days, payment_terms.basis AS basis, payment_terms.active AS active, payment_terms.user_id AS user_id, payment_terms.created_at AS created_at, payment_terms.updated_at AS updated_at 
FROM payment_terms) AS anon_1
2025-09-02 20:08:41 | INFO | sqlalchemy.engine.Engine | [generated in 0.00104s] ()
2025-09-02 20:08:41 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms ORDER BY payment_terms.name 
 LIMIT $1::INTEGER OFFSET $2::INTEGER
2025-09-02 20:08:41 | INFO | sqlalchemy.engine.Engine | [generated in 0.00449s] (100, 0)
2025-09-02 20:08:41 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 20:08:41 | INFO | sqlalchemy.engine.Engine | [generated in 0.00179s] ('audit_level',)
2025-09-02 20:08:41 | INFO | sqlalchemy.engine.Engine | COMMIT
2025-09-02 21:02:41 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 21:02:41 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 21:02:41 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 21:02:41 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 21:02:41 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 21:02:41 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 21:02:41 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 21:02:41 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.email = $1::VARCHAR
2025-09-02 21:02:41 | INFO | sqlalchemy.engine.Engine | [generated in 0.00937s] ('system@example.com',)
2025-09-02 21:02:41 | WARNING | passlib.handlers.bcrypt | (trapped) error reading bcrypt version
Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\passlib\handlers\bcrypt.py", line 620, in _load_backend_mixin
    version = _bcrypt.__about__.__version__
              ^^^^^^^^^^^^^^^^^
AttributeError: module 'bcrypt' has no attribute '__about__'
2025-09-02 21:02:42 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 21:05:57 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 21:05:57 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 21:05:57 | INFO | sqlalchemy.engine.Engine | [generated in 0.00176s] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 21:05:57 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 21:19:12 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 21:19:12 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.email = $1::VARCHAR
2025-09-02 21:19:12 | INFO | sqlalchemy.engine.Engine | [cached since 991s ago] ('system@example.com',)
2025-09-02 21:19:13 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 21:19:19 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 21:19:19 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 21:19:19 | INFO | sqlalchemy.engine.Engine | [cached since 801.3s ago] (UUID('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac'),)
2025-09-02 21:19:19 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 23:08:36 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 23:08:36 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 23:08:36 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 23:08:36 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 23:08:36 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 23:08:36 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 23:08:36 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 23:08:36 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.email = $1::VARCHAR
2025-09-02 23:08:36 | INFO | sqlalchemy.engine.Engine | [generated in 0.00089s] ('system@example.com',)
2025-09-02 23:08:36 | WARNING | passlib.handlers.bcrypt | (trapped) error reading bcrypt version
Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\passlib\handlers\bcrypt.py", line 620, in _load_backend_mixin
    version = _bcrypt.__about__.__version__
              ^^^^^^^^^^^^^^^^^
AttributeError: module 'bcrypt' has no attribute '__about__'
2025-09-02 23:08:37 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 23:09:15 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 23:09:15 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 23:09:15 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 23:09:15 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 23:09:15 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 23:09:15 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 23:09:15 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 23:09:15 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.email = $1::VARCHAR
2025-09-02 23:09:15 | INFO | sqlalchemy.engine.Engine | [generated in 0.00480s] ('system@example.com',)
2025-09-02 23:09:15 | WARNING | passlib.handlers.bcrypt | (trapped) error reading bcrypt version
Traceback (most recent call last):
  File "C:\Users\HP\AppData\Local\Programs\Python\Python313\Lib\site-packages\passlib\handlers\bcrypt.py", line 620, in _load_backend_mixin
    version = _bcrypt.__about__.__version__
              ^^^^^^^^^^^^^^^^^
AttributeError: module 'bcrypt' has no attribute '__about__'
2025-09-02 23:09:15 | INFO | sqlalchemy.engine.Engine | ROLLBACK
2025-09-02 23:13:15 | INFO | sqlalchemy.engine.Engine | select pg_catalog.version()
2025-09-02 23:13:15 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 23:13:15 | INFO | sqlalchemy.engine.Engine | select current_schema()
2025-09-02 23:13:15 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 23:13:15 | INFO | sqlalchemy.engine.Engine | show standard_conforming_strings
2025-09-02 23:13:15 | INFO | sqlalchemy.engine.Engine | [raw sql] ()
2025-09-02 23:13:15 | INFO | sqlalchemy.engine.Engine | BEGIN (implicit)
2025-09-02 23:13:15 | INFO | sqlalchemy.engine.Engine | SELECT users.id, users.username, users.email, users.full_name, users.password, users.active, users.superuser, users.role_id, users.user_id, users.created_at, users.updated_at 
FROM users 
WHERE users.id = $1::UUID
2025-09-02 23:13:15 | INFO | sqlalchemy.engine.Engine | [generated in 0.00088s] ('a9dda6b3-46e9-4c6e-a314-ab3b7cad74ac',)
2025-09-02 23:13:15 | INFO | sqlalchemy.engine.Engine | SELECT count(*) AS count_1 
FROM (SELECT payment_terms.id AS id, payment_terms.code AS code, payment_terms.name AS name, payment_terms.description AS description, payment_terms.net_days AS net_days, payment_terms.discount_percent AS discount_percent, payment_terms.discount_days AS discount_days, payment_terms.basis AS basis, payment_terms.active AS active, payment_terms.user_id AS user_id, payment_terms.created_at AS created_at, payment_terms.updated_at AS updated_at 
FROM payment_terms) AS anon_1
2025-09-02 23:13:15 | INFO | sqlalchemy.engine.Engine | [generated in 0.00386s] ()
2025-09-02 23:13:15 | INFO | sqlalchemy.engine.Engine | SELECT payment_terms.id, payment_terms.code, payment_terms.name, payment_terms.description, payment_terms.net_days, payment_terms.discount_percent, payment_terms.discount_days, payment_terms.basis, payment_terms.active, payment_terms.user_id, payment_terms.created_at, payment_terms.updated_at 
FROM payment_terms ORDER BY payment_terms.name 
 LIMIT $1::INTEGER OFFSET $2::INTEGER
2025-09-02 23:13:15 | INFO | sqlalchemy.engine.Engine | [generated in 0.00414s] (100, 0)
2025-09-02 23:13:15 | INFO | sqlalchemy.engine.Engine | SELECT settings.value 
FROM settings 
WHERE settings.key = $1::VARCHAR AND settings.active = true
2025-09-02 23:13:15 | INFO | sqlalchemy.engine.Engine | [generated in 0.00069s] ('audit_level',)
2025-09-02 23:13:15 | INFO | sqlalchemy.engine.Engine | COMMIT
